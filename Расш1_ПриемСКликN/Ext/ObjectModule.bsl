#Область Обработки

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");    
	ПараметрыРегистрации.Вставить("Наименование", "Автоматический обмен с Кликом");
	ПараметрыРегистрации.Вставить("Версия", "1.0.0.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ПараметрыРегистрации.Вставить("Информация", "Автоматический обмен с Кликом");

	ТаблицаКоманд = ПолучитьТаблицуКоманд();
 	ДобавитьКоманду(ТаблицаКоманд,
          "Автоматический обмен с Кликом", //представление команды в пользовательском интерфейсе
          "АвтоматическийОбменСКликом", //идентификатор команды; любая строка, уникальная в пределах данной обработки
          "ВызовСерверногоМетода");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьТаблицуКоманд()
  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Возврат Команды;
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(Идентификатор, ОбъектыНазначения) Экспорт
	
	ВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Автоматический обмен с Кликом");
	ДвоичныеДанные = ВнешняяОбработка.ХранилищеОбработки.Получить();
	ИмяВременногоФайла = КаталогВременныхФайлов()+"АвтоматическийОбменСКликом.epf";
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	СтруктураЗащита=новый ОписаниеЗащитыОтОпасныхДействий;
	СтруктураЗащита.ПредупреждатьОбОпасныхДействиях=ложь;
	//Создаем структуру защиты от опасных действий

	Обработка = ВнешниеОбработки.Создать(ИмяВременногоФайла,Ложь,СтруктураЗащита);
	Обработка.Инициализация();

КонецПроцедуры

#КонецОбласти

Функция НайтиВидНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.Наименование = &Наименование
		|	И ВидыНоменклатуры.ЕдиницаИзмеренияСрокаГодности = &ЕдиницаИзмеренияСрокаГодности";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияСрокаГодности", Перечисления.ЕдиницыИзмеренияВремени.Сутки);
	Запрос.УстановитьПараметр("Наименование", "Товары со сроком годности");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура Инициализация(АдресХранилища=Неопределено) Экспорт
	ЗаписьВЖурнал("Начало обмена", УровеньЖурналаРегистрации.Информация);
	
	// Получение данных с КЛИКА
	#Область ПолучениеДанных
	ВрФайл = Неопределено;
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ФайлИзХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
		ВрФайл = ПолучитьИмяВременногоФайла("xml");
		ФайлИзХранилища.Записать(ВрФайл);
	Иначе
		КлиентКомпоненты = ПолучитьКомпонентуСервер();	
		
		Адрес = "125.62.28.226";
		Порт = 5672;
		Логин = "admin";
		Пароль = "1qaz2wsX";
		ВиртуальныйХост = "/";
		ИмяОчереди = "KlikIn1c";
		
		Попытка
			КлиентКомпоненты.Connect(
				Адрес,
				Порт,
				Логин,
				Пароль,
				ВиртуальныйХост);
			
			КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);				
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		
		Исключение
				ЗаписьВЖурнал(ОписаниеОшибки() + " " + КлиентКомпоненты.GetLastError(), УровеньЖурналаРегистрации.Ошибка);	
				Возврат;
		КонецПопытки;	

	КонецЕсли;
	
	КолСообщений = 0;
	
	ВидНоменклатурыСоСрокомГодности = НайтиВидНоменклатуры();
	УИДФайла = Неопределено;
	Пока Истина Цикл
		
		Если ВрФайл = Неопределено Тогда
			Результат = ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты);
			ВрФайл = Результат.ВрФайл;
			УИДФайла = Результат.УИД;
		КонецЕсли;
		
		Если ВрФайл = Неопределено Тогда
			Если КолСообщений = 0 Тогда
				ЗаписьВЖурнал("Завершение обмена. Очередь пустая.", УровеньЖурналаРегистрации.Информация);
			Иначе
				ЗаписьВЖурнал("Завершение обмена. Кол-во сообщений " + Формат(КолСообщений,"ЧЦ=5"), УровеньЖурналаРегистрации.Информация);		
			КонецЕсли;
			КлиентКомпоненты.BasicCancel("");
			Прервать;
		КонецЕсли;
		
		КолСообщений = КолСообщений + 1;
		Ошибки = Новый Массив;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВрФайл);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		Контрагент = Неопределено;
		Организация = Неопределено;
		Договор = Неопределено;
		Валюта = Неопределено;
		
		Для Каждого message Из ДокументDOM.ДочерниеУзлы Цикл
			
			//Если message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Документ.СчетОплатыПоставщику" Тогда
			//	Для Каждого элемент Из message.ДочерниеУзлы Цикл
			//		Если элемент.ИмяУзла = "Справочник.Контрагенты" Тогда
			//			   Контрагент = XML_Справочник_Контрагенты(элемент, Ошибки);	
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Организации" Тогда
			//			  Организация = XML_Справочник_Организация(элемент, Ошибки);					
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Договора" Тогда
			//			  Договор = XML_Справочник_Договора(элемент, Организация, Контрагент, Валюта, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Валюты" Тогда
			//			  Валюта = XML_Справочник_Валюты(элемент, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.ЕдиницыИзмерения" Тогда
			//			  XML_Справочник_ЕдиницыИзмерения(элемент, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Номенклатура" Тогда
			//			  XML_Справочник_Номенклатура(элемент, ВидНоменклатуры,Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Документ.СчетОплатыПоставщику" Тогда
			//			  XML_Документ_СчетОплатыПоставщику(элемент, Организация, Контрагент, Договор, Валюта, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Документ.ЗаявкаНаРасходованиеДС" Тогда
			//			  XML_Документ_ЗаявкаНаРасходованиеДС(элемент, Организация, Контрагент, Договор, Валюта, Ошибки);
			//		КонецЕсли;				  
			//	КонецЦикла;
			//ИначеЕсли message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Документ.ПриходныйОрдерНаТовары" Тогда
			//	Для Каждого элемент Из message.ДочерниеУзлы Цикл
			//		Если элемент.ИмяУзла = "Справочник.Контрагенты" Тогда
			//			  Контрагент = XML_Справочник_Контрагенты(элемент, Ошибки);	
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Организации" Тогда
			//			  Организация = XML_Справочник_Организация(элемент, Ошибки);					
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.ЕдиницыИзмерения" Тогда
			//			  XML_Справочник_ЕдиницыИзмерения(элемент, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Склады" Тогда
			//			  Склад = XML_Справочник_Склады(элемент, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Серии" Тогда
			//			  XML_Справочник_Серии(элемент, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Справочник.Номенклатура" Тогда
			//			  XML_Справочник_Номенклатура(элемент, ВидНоменклатуры, Ошибки);
			//		ИначеЕсли элемент.ИмяУзла = "Документ.ПриходныйОрдерНаТовары" Тогда
			//			  XML_Документ_ПриходныйОрдерНаТовары(элемент, Организация, Контрагент, Склад, Валюта, Ошибки);
			//		КонецЕсли;				  
			//	КонецЦикла;
			Если message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Документ.ПоступлениеТоваровУслуг" Тогда
				Для Каждого элемент Из message.ДочерниеУзлы Цикл
					Если элемент.ИмяУзла = "Справочник.Контрагенты" Тогда
						  Контрагент = XML_Справочник_Контрагенты(элемент, Ошибки, УИДФайла);	
					ИначеЕсли элемент.ИмяУзла = "Справочник.Организации" Тогда
						  Организация = XML_Справочник_Организация(элемент, Ошибки, УИДФайла);					
					ИначеЕсли элемент.ИмяУзла = "Справочник.НомераГТД" Тогда
						  XML_Справочник_НомераГТД(элемент, Ошибки, УИДФайла);
				 	ИначеЕсли элемент.ИмяУзла = "Справочник.Валюты" Тогда
						  Валюта = XML_Справочник_Валюты(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Договора" Тогда
						  ДоговорСоглашения = XML_Справочник_Договора(элемент, Организация, Контрагент, Валюта, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.ЕдиницыИзмерения" Тогда
						  XML_Справочник_ЕдиницыИзмерения(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Склады" Тогда
						  Склад = XML_Справочник_Склады(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Серии" Тогда
						  XML_Справочник_Серии(элемент, ВидНоменклатурыСоСрокомГодности, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Номенклатура" Тогда
						  XML_Справочник_Номенклатура(элемент, ВидНоменклатурыСоСрокомГодности, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Документ.ПоступлениеТоваровУслуг" Тогда
						  XML_Документ_СчетОплатыПоставщику(Элемент, Организация, Контрагент, ДоговорСоглашения, Валюта, ВидНоменклатурыСоСрокомГодности, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Документ.ТаможеннаяДекларация" Тогда
						  XML_Документ_ТаможеннаяДекларация(Элемент, Организация, Контрагент, ДоговорСоглашения, Валюта, Ошибки, УИДФайла);
					КонецЕсли;				  
				КонецЦикла;
			ИначеЕсли message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Документ.ЗаявкаНаРасходованиеДС" Тогда
				Для Каждого элемент Из message.ДочерниеУзлы Цикл
					Если элемент.ИмяУзла = "Справочник.Контрагенты" Тогда
						  Контрагент = XML_Справочник_Контрагенты(элемент, Ошибки, УИДФайла);	
					ИначеЕсли элемент.ИмяУзла = "Справочник.Организации" Тогда
						  Организация = XML_Справочник_Организация(элемент, Ошибки, УИДФайла);					
					ИначеЕсли элемент.ИмяУзла = "Справочник.Валюты" Тогда
						  Валюта = XML_Справочник_Валюты(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Договора" Тогда
						  ДоговорСоглашение = XML_Справочник_Договора(элемент, Организация, Контрагент, Валюта, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Документ.ЗаявкаНаРасходованиеДС" Тогда
						  XML_Документ_ЗаявкаНаРасходованиеДС(элемент, Организация, Контрагент, ДоговорСоглашение, Валюта, Ошибки, УИДФайла);
					КонецЕсли;				  
				КонецЦикла;
			ИначеЕсли message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Справочник.ЗапросИнформацииПоКонтрагенту" Тогда
				Кол = 0;
				Данные = Новый Структура;
				Для Каждого элемент Из message.ДочерниеУзлы Цикл
					Если элемент.ИмяУзла = "ИНН" И ЗначениеЗаполнено(элемент.ТекстовоеСодержимое) Тогда
						Кол = Кол + 1;
					ИначеЕсли элемент.ИмяУзла = "КПП" И ЗначениеЗаполнено(элемент.ТекстовоеСодержимое) Тогда
						Кол = Кол + 1;
					ИначеЕсли элемент.ИмяУзла = "КодВПрограмме" Тогда
						Кол = Кол + 1;
					КонецЕсли;
					Данные.Вставить(элемент.ИмяУзла,элемент.ТекстовоеСодержимое);					
				КонецЦикла;
				Если Кол = 3 Тогда
					ОтправитьНаСервере(Данные);
				Иначе
					Ошибки.Добавить("В файле запроса информации по контрагенту присланы не все данные. (" + УИДФайла+")");
				КонецЕсли;
			ИначеЕсли message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Документ.ПеремещениеТоваров" Тогда
				Для Каждого элемент Из message.ДочерниеУзлы Цикл
					Если элемент.ИмяУзла = "Справочник.ЕдиницыИзмерения" Тогда
						  XML_Справочник_ЕдиницыИзмерения(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Организации" Тогда
						  Организация = XML_Справочник_Организация(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Склады" Тогда
						  Склад = XML_Справочник_Склады(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Номенклатура" Тогда
						  XML_Справочник_Номенклатура(элемент, ВидНоменклатурыСоСрокомГодности, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Документ.ПеремещениеТоваров" Тогда
						XML_Документ_ПеремещениеТоваров(Элемент, Ошибки, УИДФайла);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли message.Атрибуты.Количество() > 0 И message.Атрибуты[0].Значение = "Документ.СчетПокупателю" Тогда
				Для Каждого элемент Из message.ДочерниеУзлы Цикл
					Если элемент.ИмяУзла = "Справочник.ЕдиницыИзмерения" Тогда
						  XML_Справочник_ЕдиницыИзмерения(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Валюты" Тогда
						  Валюта = XML_Справочник_Валюты(элемент, Ошибки, УИДФайла);						  
					ИначеЕсли элемент.ИмяУзла = "Справочник.Организации" Тогда
						  Организация = XML_Справочник_Организация(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Контрагенты" Тогда
						  Контрагент = XML_Справочник_Контрагенты(элемент, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Договора" Тогда
						  ДоговорСоглашение = XML_Справочник_СоглашениеСКлиентом(элемент, Организация, Контрагент, Валюта, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Справочник.Номенклатура" Тогда
						  XML_Справочник_Номенклатура(элемент, ВидНоменклатурыСоСрокомГодности, Ошибки, УИДФайла);
					ИначеЕсли элемент.ИмяУзла = "Документ.СчетПокупателю" Тогда
						  XML_Документ_СчетПокупателю(Элемент, Организация, Контрагент, ДоговорСоглашение, Валюта, Ошибки, УИДФайла);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Элем Из Ошибки Цикл
			ЗаписьВЖурнал(Элем, УровеньЖурналаРегистрации.Ошибка);	
		КонецЦикла;
		
		ВрФайл = Неопределено;
	КонецЦикла;	
	
	#КонецОбласти
	
	// Отправка данных в КЛИК
	#Область ОтправкаДанных
	
	
	#КонецОбласти

КонецПроцедуры

#Область ФориированиеОбъектов

Процедура XML_Справочник_НомераГТД(Элементы, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "СтранаПроисхождения" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "РегистрационныйНомер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 3 Тогда
		Ошибки.Добавить("Справочник.НомераГТД, не все ключевые поля присутствуют. (" + УИДФайла + ")");
	КонецЕсли;
	
	НомерГТДСсылка = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.НомераГТД"));
	
	Если НомерГТДСсылка <> Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераГТД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|ГДЕ
		|	НомераГТД.Код = &Код
		|	И НЕ НомераГТД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", Результат.РегистрационныйНомер);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
		Возврат;
	КонецЕсли;
	
	НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
	НомерГТДОбъект.Код = Результат.РегистрационныйНомер;
	СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(Результат.СтранаПроисхождения);
	Если СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка() Тогда
		Ошибки.Добавить("Не найдена страна по коду " +  Результат.СтранаПроисхождения + " (" + УИДФайла + ")");
	Иначе
		НомерГТДОбъект.СтранаПроисхождения = СтранаПроисхождения;
	КонецЕсли;
	
	Попытка
		НомерГТДОбъект.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, НомерГТДОбъект.Ссылка);
	Исключение
		Ошибки.Добавить("Запись номера ГТД " + Результат.РегистрационныйНомер + ". " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;
		
КонецПроцедуры

Функция XML_Справочник_Контрагенты(Элементы, Ошибки, УИДФайла)	
	Результат = Новый Структура;
	КонтактнаяИнформация = Неопределено;
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если  элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;				
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ЮрФизЛицо" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ИностраннаяКомпания" Тогда
					Ном = Ном + 1;					
				КонецЕсли;
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;                                     
		
		Если элемент.ИмяУзла = "КонтактнаяИнформация" Тогда
			КонтактнаяИнформация = элемент;
		Иначе
			Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
		КонецЕсли;
	КонецЦикла;
	
	Если Ном <> 4 Тогда
		Ошибки.Добавить("Справочник.Контрагент, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат Неопределено;
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(Результат.КодВПрограмме);
		КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(УИД);		
		Если ЗначениеЗаполнено(КонтрагентСсылка.ПолучитьОбъект()) Тогда
			Возврат КонтрагентСсылка;
		КонецЕсли;
	Исключение
		УИД = Неопределено
	КонецПопытки;
	
	Контрагент = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.Партнеры"));
		
	Если Контрагент <> Неопределено Тогда
		Возврат Контрагент;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Если НЕ Результат.ИностраннаяКомпания 
		И ЗначениеЗаполнено(Результат.ИНН) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Партнер КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП";
			
		Запрос.УстановитьПараметр("ИНН", Результат.ИНН);
		Если ЗначениеЗаполнено(Результат.КПП) Тогда
			Запрос.УстановитьПараметр("КПП", Результат.КПП);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Контрагенты.КПП = &КПП","");
		КонецЕсли;
			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
			Возврат ВыборкаДетальныеЗаписи.Ссылка;				
		КонецЕсли;
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Партнер КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.НаименованиеПолное = &НаименованиеПолное";

		Запрос.УстановитьПараметр("НаименованиеПолное", Результат.НаименованиеПолное);			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
			Возврат ВыборкаДетальныеЗаписи.Ссылка;				
		КонецЕсли;

	КонецЕсли;
		
	Партнер = Справочники.Партнеры.СоздатьЭлемент();
	Партнер.ДатаРегистрации = ТекущаяДата();
	Партнер.Поставщик = Истина;
	Партнер.Наименование = Результат.Наименование;
	Партнер.НаименованиеПолное = Результат.НаименованиеПолное;
	Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;

	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.Наименование = Результат.Наименование;
	Контрагент.НаименованиеПолное = Результат.НаименованиеПолное;
	
	Если НЕ Результат.ИностраннаяКомпания Тогда
		Контрагент.ИНН = Результат.ИНН;
		Контрагент.КПП = Результат.КПП;
			
		Попытка
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо[Результат.ЮрФизЛицо];
		Исключение
			Ошибки.Добавить("Перечисление ЮрФизЛицо, ошибка - " + Результат.СтранаРегистрации + " (" + УИДФайла + ")");
		КонецПопытки;

	Иначе
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Результат.СтранаРегистрации) Тогда
		Контрагент.СтранаРегистрации = НайтиСтрануРегистрации(Результат.СтранаРегистрации);
	КонецЕсли;
				
	КонтактнаяИнфа = Новый Массив;		
	Если КонтактнаяИнформация <> Неопределено Тогда			
		Для Каждого i Из КонтактнаяИнформация.ДочерниеУзлы Цикл 
			КонтактнаяИнфаСтруктура = Новый Структура;
			Для Каждого j Из i.ДочерниеУзлы Цикл 
				КонтактнаяИнфаСтруктура.Вставить(j.ИмяУзла,j.ТекстовоеСодержимое);
			КонецЦикла;
			КонтактнаяИнфа.Добавить(КонтактнаяИнфаСтруктура);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого i Из КонтактнаяИнфа Цикл
		Если i.ВидКонтактнойИнформации = "ФактическийАдрес" Тогда
			Запись = Контрагент.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Запись.Представление = i.ЗначенияПолей;
				
			Запись = Партнер.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Запись.Представление = i.ЗначенияПолей;
		ИначеЕсли i.ВидКонтактнойИнформации = "ЮридическийАдрес" Тогда
			Запись = Контрагент.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			Запись.Представление = i.ЗначенияПолей;
				
			Запись = Партнер.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			Запись.Представление = i.ЗначенияПолей;
		ИначеЕсли i.ВидКонтактнойИнформации = "ВебСтраница" Тогда
			Запись = Контрагент.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
			Запись.Представление = i.ЗначенияПолей;
				
			Запись = Партнер.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
			Запись.Представление = i.ЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
		
	Попытка
		Партнер.Записать();
		Контрагент.Партнер = Партнер.Ссылка;

		Контрагент.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, Партнер.Ссылка);
		Возврат  Партнер.Ссылка;
	Исключение
		Ошибки.Добавить("Запись элемента контрагента. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;
		
КонецФункции

Функция XML_Справочник_Организация(Элементы, Ошибки, УИДФайла)
	
	Результат = Новый Структура;
	КонтактнаяИнформация = Неопределено;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ЮрФизЛицо" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ИНН" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "КПП" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "КонтактнаяИнформация" Тогда
			КонтактнаяИнформация = элемент;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 4 Тогда
		Ошибки.Добавить("Справочник.Организации, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Организация = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.Организации"));
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Организация;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Результат.ИНН) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП";
			
		Запрос.УстановитьПараметр("ИНН", Результат.ИНН);
		Если ЗначениеЗаполнено(Результат.КПП) Тогда
			Запрос.УстановитьПараметр("КПП", Результат.КПП);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Организации.КПП = &КПП","");
		КонецЕсли;
			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
			Возврат ВыборкаДетальныеЗаписи.Ссылка;				
		КонецЕсли;
	КонецЕсли;
		
	Организация = Справочники.Организации.СоздатьЭлемент();
	Организация.ДатаРегистрации = ТекущаяДата();
	Организация.ИНН = Результат.ИНН;
	Организация.КПП = Результат.КПП;
    Организация.Наименование = Результат.Наименование;
	Организация.НаименованиеСокращенное = Результат.Наименование;
	Организация.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		
	Если Результат.Свойство("НаименованиеПолное") Тогда
		Организация.НаименованиеПолное = Результат.НаименованиеПолное;
	КонецЕсли;
	Если Результат.Свойство("ОГРН") Тогда
		Организация.ОГРН = Результат.ОГРН;
	КонецЕсли;
	Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;

	КонтактнаяИнфа = Новый Массив;		
	Если КонтактнаяИнформация <> Неопределено Тогда			
		Для Каждого i Из КонтактнаяИнформация.ДочерниеУзлы Цикл 
			КонтактнаяИнфаСтруктура = Новый Структура;
			Для Каждого j Из i.ДочерниеУзлы Цикл 
				КонтактнаяИнфаСтруктура.Вставить(j.ИмяУзла,j.ТекстовоеСодержимое);
			КонецЦикла;
			КонтактнаяИнфа.Добавить(КонтактнаяИнфаСтруктура);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого i Из КонтактнаяИнфа Цикл
		Если i.ВидКонтактнойИнформации = "ФактическийАдрес" Тогда
			Запись = Организация.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Запись.Представление = i.ЗначенияПолей;
		ИначеЕсли i.ВидКонтактнойИнформации = "АдресЭлектроннойПочты" Тогда
			Запись = Организация.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.Email;
			Запись.Представление = i.ЗначенияПолей;
		ИначеЕсли i.ВидКонтактнойИнформации = "ВебСтраница" Тогда
			Запись = Организация.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.Другое;
			Запись.Представление = i.ЗначенияПолей;
		ИначеЕсли i.ВидКонтактнойИнформации = "Телефон" Тогда
			Запись = Организация.КонтактнаяИнформация.Добавить();
			Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.Телефон;
			Запись.Представление = i.ЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
		
	Попытка
		Организация.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, Организация.Ссылка);
		Возврат  Организация.Ссылка;
	Исключение
		Ошибки.Добавить("Запись элемента организации. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецПопытки;

КонецФункции

Функция XML_Справочник_Договора(Элементы, Организация, Контрагент, Валюта, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ВидДоговора" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Контрагент" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Валюта" Тогда
					Если ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
						Ном = Ном + 1;
					ИначеЕсли ЗначениеЗаполнено(Валюта) Тогда
						Ном = Ном + 1;
					КонецЕсли;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 6 Тогда
		Ошибки.Добавить("Справочник.Договоры, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(Результат.КодВПрограмме);
		
		ДогСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(УИД);		
		
		Если ЗначениеЗаполнено(ДогСсылка.ПолучитьОбъект()) Тогда
			Возврат ДогСсылка;
		КонецЕсли;
	Исключение
		УИД = Неопределено
	КонецПопытки;
	
	ДоговорКонтрагента = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
	Если ДоговорКонтрагента <> Неопределено Тогда
		Возврат ДоговорКонтрагента;
	КонецЕсли;	
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();		
	ДоговорКонтрагента.ВариантОформленияЗакупок  = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
	ДоговорКонтрагента.ВариантПриемкиТоваров = перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ДоговорКонтрагента.ВыполненыОбязательстваПоДоговоруГОЗ = Ложь;
	ДоговорКонтрагента.ДоговорСУчастникомГОЗ = Ложь;
		
	Если Результат.Свойство("Дата") Тогда
		ДоговорКонтрагента.Дата = XMLЗначение(тип("Дата"),Результат.Дата);
	Иначе
		ДоговорКонтрагента.Дата = ТекущаяДата();
	КонецЕсли;
	
	ДоговорКонтрагента.Организация = Организация;
	ДоговорКонтрагента.Партнер = Контрагент;
	
	Если Результат.Свойство("Номер") Тогда
		ДоговорКонтрагента.Номер = Результат.Номер;
	КонецЕсли;
		
	Если Результат.Свойство("Наименование") Тогда
		ДоговорКонтрагента.Наименование = Результат.Наименование;
	Иначе
		ДоговорКонтрагента.Наименование = "Основной договор от " + Формат(ДоговорКонтрагента.Дата,"ДЛФ=Д") + " г.";
	КонецЕсли;
	
	ДоговорКонтрагента.НаименованиеДляПечати = ДоговорКонтрагента.Наименование;
	ДоговорКонтрагента.ЗаданГрафикИсполнения = Ложь;
	ДоговорКонтрагента.ЗакупкаПодДеятельностьОпределяетсяВДокументе = Истина;
	ДоговорКонтрагента.ЗапрещаетсяПросроченнаяЗадолженность = Ложь;
	ДоговорКонтрагента.ИностранныйИсполнительВУтвержденномПеречнеГОЗ = Ложь;
	ДоговорКонтрагента.Контрагент = НайтиКонтрагента(Контрагент);
	ДоговорКонтрагента.ПлатежиПо275ФЗ = Ложь;
	ДоговорКонтрагента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ДоговорКонтрагента.НалогообложениеНДСОпределяетсяВДокументе = Ложь;
	ДоговорКонтрагента.ОграничиватьСуммуЗадолженности = Ложь;
	ДоговорКонтрагента.ОплатаРасходовПоТарифамСГосрегулированием =  Ложь;
	ДоговорКонтрагента.Валюта = НайтиВалюту(Результат.Валюта);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.Валюта) Тогда
	
		Если Результат.Свойство("ВалютаВзаиморасчетов") Тогда
			ДоговорКонтрагента.ВалютаВзаиморасчетов = НайтиВалюту(Результат.ВалютаВзаиморасчетов);
		КонецЕсли;	
					
	Иначе
		ДоговорКонтрагента.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
		ДоговорКонтрагента.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если ДоговорКонтрагента.Валюта.Код = "643" Тогда
		Если ДоговорКонтрагента.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			ДоговорКонтрагента.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Иначе
			ДоговорКонтрагента.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
		КонецЕсли;
	Иначе
		ДоговорКонтрагента.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	КонецЕсли;
		
	ДоговорКонтрагента.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	ДоговорКонтрагента.Согласован = Истина;	
	ДоговорКонтрагента.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	
	Попытка
		ДоговорКонтрагента.ТипДоговора = Перечисления.ТипыДоговоров[Результат.ВидДоговора];			
	Исключение
		Ошибки.Добавить("Ошибка установки тип договора " + Результат.ВидДоговора + "." + ОписаниеОшибки() + " (" + УИДФайла + ")");		
	КонецПопытки;
	
	ДоговорКонтрагента.УстановленСрокОплаты = Ложь;
	ДоговорКонтрагента.УчетАгентскогоНДС = Ложь;
	ДоговорКонтрагента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		
	Попытка
		ДоговорКонтрагента.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, ДоговорКонтрагента.Ссылка);

	Исключение
		Ошибки.Добавить("Запись элемента договора. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;

	
	Возврат ДоговорКонтрагента.Ссылка;
	
КонецФункции

Функция XML_Справочник_СоглашениеСКлиентом(Элементы, Организация, Контрагент, Валюта, Ошибки, УИДФайла)
	Результат = Новый Структура;

	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ВидДоговора" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Контрагент" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Валюта" Тогда
					Если ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
						Ном = Ном + 1;
					ИначеЕсли ЗначениеЗаполнено(Валюта) Тогда
						Ном = Ном + 1;
					КонецЕсли;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 6 Тогда
		Ошибки.Добавить("Справочник.Договоры, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(Результат.КодВПрограмме);
		
		ДогСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(УИД);		
		
		Если ЗначениеЗаполнено(ДогСсылка.ПолучитьОбъект()) Тогда
			Возврат ДогСсылка;
		КонецЕсли;
	Исключение
		УИД = Неопределено
	КонецПопытки;
	
	ДоговорКонтрагента = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.СоглашенияСКлиентами"));
		
	Если ДоговорКонтрагента <> Неопределено Тогда
		Возврат ДоговорКонтрагента;
	КонецЕсли;	
	
	Соглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
	Если ЗначениеЗаполнено(Валюта) Тогда
		Соглашение.Валюта = Валюта;
	КонецЕсли;
	Если Результат.Свойство("ВалютаВзаиморасчетов") И ЗначениеЗаполнено(Результат.ВалютаВзаиморасчетов) Тогда
		Соглашение.ВалютаВзаиморасчетов = Результат.ВалютаВзаиморасчетов; 
	КонецЕсли;
		
	Если Валюта.Код = "643" Тогда
		Если Соглашение.Валюта = Соглашение.ВалютаВзаиморасчетов Тогда
			Соглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Иначе
			Соглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях;
		КонецЕсли;
	Иначе
		Соглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	КонецЕсли;
	Соглашение.ВозвращатьМногооборотнуюТару = Ложь;
	
	Если Результат.Свойство("Дата") Тогда
		Соглашение.Дата = Результат.Дата;
	КонецЕсли;
	
	Соглашение.ИспользуютсяДоговорыКонтрагентов = Ложь;
	Соглашение.Организация = Организация;
	Соглашение.Партнер = Контрагент;
	Соглашение.Контрагент = НайтиКонтрагента(Контрагент);
	
	Если Результат.Свойство("Наименование") Тогда
		Соглашение.Наименование = Результат.Наименование;
	Иначе
		Соглашение.Наименование = "Основное соглашение от " + Формат(Соглашение.Дата,"ДЛФ=Д") + " г.";
	КонецЕсли;

	Если Результат.Свойство("Номер") Тогда
		Соглашение.Номер = Результат.Номер;
	КонецЕсли;
	Соглашение.ПроцентРучнойСкидки = 0;
	Соглашение.Согласован = истина;
	Соглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	Соглашение.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	Соглашение.ТребуетсяЗалогЗаТару = Ложь;
	Соглашение.УдержатьВознаграждение = Ложь;
	Соглашение.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;	
	Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Соглашение.ЦенаВключаетНДС = Истина;
			
	Попытка
		Соглашение.Записать();
		Набор = РегистрыСведений.Расш1_СоответствияКлик1С.СоздатьМенеджерЗаписи();
		Набор.УИД = Результат.КодВПрограмме;
		Набор.Ресурс = Соглашение.Ссылка;
		Набор.Записать();
		Возврат  Соглашение.Ссылка;
	Исключение
		Ошибки.Добавить("Запись элемента соглашения. " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДоговорКонтрагента.Ссылка;
	
КонецФункции


Функция XML_Справочник_Валюты(Элементы, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Код" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 2 Тогда
		Ошибки.Добавить("Справочник.Валюты, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Код = &Код
		|	И НЕ Валюты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", Результат.Код);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура XML_Справочник_ЕдиницыИзмерения(Элементы, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 2 Тогда
		Ошибки.Добавить("Справочник.ЕдиницыИзмерения, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.КодВПрограмме) Тогда
		НайтиЗаглушку(Ошибки, УИДФайла);
		Возврат;
	КонецЕсли;
		
	ЕдиницаИзмерения = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения.Знаменатель) Тогда
			ЕдиницаОбъект = ЕдиницаИзмерения.ПолучитьОбъект();
			ЕдиницаОбъект.Знаменатель = 1;
			Попытка
				ЕдиницаОбъект.Записать();
			Исключение
				Ошибки.Добавить("Запись элемента единицы измерения. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			КонецПопытки;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Код = &Код
		|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
			
	Запрос.УстановитьПараметр("Код", Результат.КодВПрограмме);
	РезультатЗапроса = Запрос.Выполнить();
			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		 ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
		Возврат;				
	КонецЕсли;
	
	Дерево = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеКлассификатора();
	Рез  = Ложь;
	Результат = ОбойтиЭлементыДерева(Дерево, СокрЛП(Результат.КодВПрограмме), Рез);
	
	Если ЗначениеЗаполнено(Результат) Тогда	
		НовыйЭлемент = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		НовыйЭлемент.Код = Результат.КодЧисловой;
		Если ЗначениеЗаполнено(Результат.Знаменатель) Тогда
			НовыйЭлемент.Знаменатель = Результат.Знаменатель;
		Иначе
			НовыйЭлемент.Знаменатель = 1;
		КонецЕсли;
		
		НовыйЭлемент.МеждународноеСокращение = Результат.КодовоеБуквенноеОбозначениеМеждународное;
		НовыйЭлемент.НаименованиеПолное = Результат.Наименование;
		НовыйЭлемент.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин[Результат.ТипИзмеряемойВеличины];
		НовыйЭлемент.Наименование = Результат.Наименование;
		НовыйЭлемент.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		НовыйЭлемент.Числитель = Результат.Числитель;
		
		Попытка
			НовыйЭлемент.Записать();
			ЗаписатьУИД(Результат.КодВПрограмме, НовыйЭлемент.Ссылка);
		Исключение
			Ошибки.Добавить("Запись элемента единицы измерения. " + ОписаниеОшибки() + " (" + УИДФайла+ ")");
		КонецПопытки;
	Иначе			
		ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмерения.Код = Результат.КодВПрограмме;
		ЕдиницаИзмерения.Наименование = Результат.Наименование;
		
		Если Результат.Свойство("НаименованиеПолное") Тогда
			ЕдиницаИзмерения.НаименованиеПолное = Результат.НаименованиеПолное;
		КонецЕсли;
		
		Попытка
			ЕдиницаИзмерения.Записать();
			ЗаписатьУИД(Результат.КодВПрограмме, ЕдиницаИзмерения.Ссылка);
		Исключение
			Ошибки.Добавить("Запись элемента единицы измерения. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЗаглушку(Ошибки, УИДФайла)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "--");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмерения.Код = "ЗГЛ";
		ЕдиницаИзмерения.Наименование = "--";
		ЕдиницаИзмерения.НаименованиеПолное = "--";
		
		Попытка
			ЕдиницаИзмерения.Записать();
			Результат = ЕдиницаИзмерения.Ссылка; 
		Исключение
			Ошибки.Добавить("Запись элемента единицы измерения. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;

	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбойтиЭлементыДерева(СтрокиДерева, Код, Рез)      	
  	
	Для Каждого СтрПолученногоДерева Из СтрокиДерева.Строки Цикл
		Если СтрПолученногоДерева.КодЧисловой = Код Тогда
			Рез = Истина;
			Возврат СтрПолученногоДерева;
		КонецЕсли;
		
		Если СтрПолученногоДерева.Строки.Количество()>0 Тогда
			Результат = ОбойтиЭлементыДерева(СтрПолученногоДерева, Код, Рез);
			Если Рез Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
КонецФункции

Процедура XML_Справочник_Номенклатура(Элементы, ВидНоменклатуры, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Артикул" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ЕдиницаИзмерения" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ТипНоменклатуры" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 5 Тогда
		Ошибки.Добавить("Справочник.Номенклатура, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(Результат.КодВПрограмме);
		НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(УИД);		
		Если ЗначениеЗаполнено(НоменклатураСсылка.ПолучитьОбъект()) Тогда
			Возврат;
		КонецЕсли;
	Исключение
		УИД = Неопределено
	КонецПопытки;

	НоменклатураСсылка = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.Номенклатура"));
			
	Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Наименование = &Наименование
			|	И Номенклатура.Артикул = &Артикул";
			
	Запрос.УстановитьПараметр("Артикул", Результат.Артикул);
	Запрос.УстановитьПараметр("Наименование", Результат.Наименование);
	РезультатЗапроса = Запрос.Выполнить();
			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
		Возврат;				
	КонецЕсли;
			
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	Номенклатура.Артикул = Результат.Артикул;
	Номенклатура.Наименование = Результат.Наименование;
	Номенклатура.НаименованиеПолное = Результат.НаименованиеПолное;
	Номенклатура.ЕдиницаИзмерения = НайтиОбъектСинхронизации(Результат.ЕдиницаИзмерения,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения;
	Номенклатура.КоэффициентЕдиницыДляОтчетов = 1;
	Номенклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	
	Номенклатура.ВидНоменклатуры = ВидНоменклатуры; 
	
	Попытка
		Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры[Результат.ТипНоменклатуры];
	Исключение
		Ошибки.Добавить("Тип товара - " + Результат.ТипНоменклатуры + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;

	Попытка
		Номенклатура.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, Номенклатура.Ссылка);
	Исключение
		Ошибки.Добавить("Запись элемента номенклатуры. " + Результат.Наименование + " (" + Результат.Артикул + ")" + ОписаниеОшибки() + " " + УИДФайла + ")");
	КонецПопытки;
	
КонецПроцедуры

Функция XML_Справочник_Склады(Элементы, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Наименование" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ТипСклада" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 3 Тогда
		Ошибки.Добавить("Справочник.Склады, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	СкладСсылка = НайтиОбъектСинхронизации(Результат.КодВПрограмме,Тип("СправочникСсылка.Склады"));
	
	Если ЗначениеЗаполнено(СкладСсылка) Тогда
		Возврат СкладСсылка;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Наименование = &Наименование";
			
	Запрос.УстановитьПараметр("Наименование", Результат.Наименование);
	РезультатЗапроса = Запрос.Выполнить();
			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
		Возврат ВыборкаДетальныеЗаписи.Ссылка;;				
	КонецЕсли;
			
	Склад = Справочники.Склады.СоздатьЭлемент();
	
	//Если Найти(Результат.ТипСклада,"Розничный") > 0  Тогда
	//	Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	//ИначеЕсли Найти(Результат.ТипСклада,"Оптовый") > 0  Тогда
		Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	//Иначе
	//	Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	//КонецЕсли;
	Склад.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
	Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
	Склад.ИспользоватьСтатусыПриходныхОрдеров = Истина;
	Склад.ИспользоватьОрдернуюСхемуПриОтгрузке = Истина;
	Склад.ИспользоватьСтатусыРасходныхОрдеров = Истина;
	Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Истина;
	Склад.ИспользоватьСтатусыПересчетовТоваров = Истина;
	Склад.НастройкаАдресногоХранения = Истина;
	Склад.ИспользоватьАдресноеХранениеСправочно = Истина;
	Склад.ИспользованиеРабочихУчастков = Перечисления.ИспользованиеСкладскихРабочихУчастков.НеИспользовать;

	
	Склад.Наименование = Результат.Наименование;
				
	Попытка
		Склад.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, Склад.Ссылка);
	Исключение
		Ошибки.Добавить("Запись элемента склада измерения. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;
	
	Возврат Склад.Ссылка;
КонецФункции

Процедура XML_Справочник_Серии(Элементы, ВидНоменклатуры, Ошибки, УИДФайла)
	Результат = Новый Структура;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Сертификат" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "ДатаПоступления" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Ячейка" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
				КонецЕсли;		
				Результат.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Результат.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 4 Тогда
		Ошибки.Добавить("Справочник.Серии, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайтиОбъектСинхронизации(Результат.КодВПрограмме)) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Номер = &Номер
		|	И СерииНоменклатуры.Расш1_Сертификат = &Сертификат
		|	И СерииНоменклатуры.Расш1_ДатаПоступления = &ДатаПоступления";
			
	Запрос.УстановитьПараметр("Номер", Результат.Номер);
	Запрос.УстановитьПараметр("Сертификат", Результат.Сертификат);
	Запрос.УстановитьПараметр("ДатаПоступления", XMLЗначение(Тип("Дата"),Результат.ДатаПоступления));
	РезультатЗапроса = Запрос.Выполнить();
			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаписатьУИД(Результат.КодВПрограмме, ВыборкаДетальныеЗаписи.Ссылка);
		Возврат;				
	КонецЕсли;
			
	Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	Серия.Номер = Результат.Номер;
	Серия.Расш1_Сертификат = Результат.Сертификат;
	Серия.Расш1_ДатаПоступления = XMLЗначение(Тип("Дата"),Результат.ДатаПоступления);
	Серия.Расш1_Ячейка = Справочники.СкладскиеЯчейки.НайтиПоНаименованию(Результат.Ячейка);
	Серия.ВидНоменклатуры = ВидНоменклатуры;
	Серия.ГоденДо = Дата(2030,1,1);
	
	Если Результат.Свойство("Комментарий") И ЗначениеЗаполнено(Результат.Комментарий) Тогда
		Серия.Расш1_Коммент = Результат.Комментарий;
	КонецЕсли;
				
	Попытка
		Серия.Записать();
		ЗаписатьУИД(Результат.КодВПрограмме, Серия.Ссылка);
	Исключение
		Ошибки.Добавить("Запись элемента серии. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;
	
КонецПроцедуры

Процедура XML_Документ_СчетОплатыПоставщику(Элементы, Организация, Контрагент, ДоговорСоглашения, Валюта, ВидНоменклатуры, Ошибки, УИДФайла)
	
	РезультатШапка = Новый Структура;
	МассивТовары = Новый Массив;
	Запрос = Новый Запрос;

	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Валюта" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "ВидОперации" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли ВРег(j.ИмяУзла) = ВРег("Контрагент") И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Договор" Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Товары" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатТовары = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "Сумма" ИЛИ jj.ИмяУзла = "СуммаНДС" ИЛИ jj.ИмяУзла = "Цена" ИЛИ jj.ИмяУзла = "ЦенаЗаУпаковку" 
						ИЛИ jj.ИмяУзла = "Количество" ИЛИ jj.ИмяУзла = "КоличествоУпаковок" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм/количеств в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;	
					ИначеЕсли jj.ИмяУзла = "СрокГодности" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Дата"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование срока годности в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;	
					Иначе
						РезультатТовары.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивТовары.Добавить(РезультатТовары);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 8 Тогда
		Ошибки.Добавить("Документ.ЗаказПоставщику, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	ДокСсылка = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ЗаказПоставщику"));
		
	ЕстьДокумент = Ложь;
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = ДокСсылка.ПолучитьОбъект();		
		ЕстьДокумент = Истина;
	КонецЕсли;
	
	Если Док = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
				|	ЗаказПоставщику.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
				|ГДЕ
				|	ЗаказПоставщику.Дата = &Дата
				|	И ЗаказПоставщику.Номер = &Номер
				|	И ЗаказПоставщику.Партнер = &Контрагент
				|	И ЗаказПоставщику.Организация = &Организация";
			
		Запрос.УстановитьПараметр("Дата", РезультатШапка.Дата);
		Запрос.УстановитьПараметр("Номер", РезультатШапка.Номер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Иначе
			Док = Неопределено;
		КонецЕсли;
				
	КонецЕсли;
		
	Если Док = Неопределено Тогда
		Док = Документы.ЗаказПоставщику.СоздатьДокумент();
	Иначе
		Док.Товары.Очистить();
		Док.ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
		
	Док.Дата = РезультатШапка.Дата;
	Док.ДатаПоступления = РезультатШапка.Дата;
	Док.Номер = РезультатШапка.Номер;
	Док.Партнер = Контрагент;
	Док.Контрагент = НайтиКонтрагента(Контрагент);
	Док.Организация = Организация;
	Док.Валюта = Валюта;
	Если РезультатШапка.Свойство("СуммаВключаетНДС") Тогда
		Док.ЦенаВключаетНДС = XMLЗначение(тип("Булево"),РезультатШапка.СуммаВключаетНДС);
	КонецЕсли;
	Док.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
	Док.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	Док.Согласован = Истина;
	Док.СуммаДокумента = РезультатШапка.Сумма;
	Док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	Док.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Док.ПоступлениеОднойДатой = Истина;
	Док.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	
	Если Валюта.Код <> "643" Тогда
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
		Док.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	Иначе
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Док.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	
	Док.Склад = НайтиОбъектСинхронизации(РезультатШапка.Склад,Тип("СправочникСсылка.Склады"));
	Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Док.Договор = ДоговорСоглашения;
	//Док.Соглашение = ДоговорСоглашения.Соглашение;
	ЕстьГТД = Ложь;
	
	Для Каждого Элем Из МассивТовары Цикл
		НоваяСтрока = Док.Товары.Добавить();
		НоваяСтрока.ДатаПоступления = Док.Дата;
		НоваяСтрока.Номенклатура = НайтиОбъектСинхронизации(Элем.Номенклатура,Тип("СправочникСсылка.Номенклатура"));
		НоваяСтрока.Серия = НайтиОбъектСинхронизации(Элем.Серия);
		НоваяСтрока.НомерГТД = НайтиОбъектСинхронизации(Элем.НомерГТД,Тип("СправочникСсылка.НомераГТД"));

		Если Элем.Свойство("ЕдиницаУпаковок") И ЗначениеЗаполнено(Элем.ЕдиницаУпаковок) Тогда			
			НоваяСтрока.Упаковка = НайтиОбъектСинхронизации(Элем.ЕдиницаУпаковок,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ИначеЕсли Элем.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(Элем.ЕдиницаИзмерения) Тогда
			НоваяСтрока.Упаковка = НайтиОбъектСинхронизации(Элем.ЕдиницаИзмерения,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Иначе
			НоваяСтрока.Упаковка = НайтиЗаглушку(Ошибки, УИДФайла);
		КонецЕсли;		
		
		НоваяСтрока.КоличествоУпаковок = Элем.Количество;
		НоваяСтрока.Количество = Элем.Количество;
		НоваяСтрока.Цена = Элем.Цена;
		НоваяСтрока.Сумма = Элем.Сумма;
		НоваяСтрока.Склад = Док.Склад;
		//НоваяСтрока.СуммаНДС = Элем.СуммаНДС;
		НоваяСтрока.СуммаСНДС = Элем.Сумма; //Элем.СуммаНДС + Элем.Сумма;
		Если Элем.Свойство("СтавкаНДС") Тогда
			Попытка
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[Элем.СтавкаНДС];
			Исключение
				Ошибки.Добавить("Ставка НДС - " + Элем.СтавкаНДС + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			КонецПопытки;	
		Иначе
			Если Валюта.Код <> "643" Тогда
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			КонецЕсли;
		КонецЕсли;

		Если Элем.Свойство("СрокГодности") И ЗначениеЗаполнено(Элем.СрокГодности) Тогда			  
			Попытка
				СерияОбъект = НоваяСтрока.Серия.ПолучитьОбъект();
				СерияОбъект.ГоденДо = Элем.СрокГодности;
				СерияОбъект.Записать();
			Исключение
				Ошибки.Добавить("Изменение вида серии " + Строка(СерияОбъект) + ". " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			КонецПопытки;
		КонецЕсли;
		
		Если Элем.Свойство("НомерГТД") И ЗначениеЗаполнено(Элем.НомерГТД) И Не НоваяСтрока.Номенклатура.ВестиУчетПоГТД Тогда	
			НоменклатураОбъект = НоваяСтрока.Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ВестиУчетПоГТД = Истина;
			
			Попытка 
				НоменклатураОбъект.Записать();
			Исключение
				Ошибки.Добавить("Изменение вида номенклатуры " + Строка(НоменклатураОбъект) + ". " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			КонецПопытки;	
		КонецЕсли;		
		
	КонецЦикла;
		
	НоваяСтрокаЭтапов = Док.ЭтапыГрафикаОплаты.Добавить();
	НоваяСтрокаЭтапов.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
	НоваяСтрокаЭтапов.ДатаПлатежа = Док.Дата;
	НоваяСтрокаЭтапов.ПроцентЗалогаЗаТару = 100;
	НоваяСтрокаЭтапов.ПроцентПлатежа = 100;
	НоваяСтрокаЭтапов.СуммаПлатежа = Док.СуммаДокумента;
		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибки.Добавить("Запись документа ЗаказПоставщику " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			
		КонецПопытки;
	КонецПопытки;
		
	Если НЕ ЕстьДокумент Тогда
		ЗаписатьУИД(РезультатШапка.КодВПрограмме, Док.Ссылка);
	КонецЕсли;
	
	// Накладная
	
	НакладнаяСсылка = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	НовыйДокумент = Ложь;
	
	Если ЗначениеЗаполнено(НакладнаяСсылка) Тогда
		НакладнаяОбъект = НакладнаяСсылка.ПолучитьОбъект();
		НакладнаяОбъект.Товары.Очистить();
	Иначе
		НакладнаяОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		НовыйДокумент = Истина;
	КонецЕсли;
	
	Попытка
		НакладнаяОбъект.Заполнить(Док.Ссылка);
	Исключение
		Ошибки.Добавить("Ошибка заполнения накладаной. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
	КонецПопытки;
	
	НакладнаяОбъект.Дата = Док.Дата;
	НакладнаяОбъект.Номер = Док.Номер;
	
	Если МассивТовары.Количество() > 0 Тогда
		СтрокаТовара = МассивТовары[0];
		НомерГТД = НайтиОбъектСинхронизации(СтрокаТовара.НомерГТД,Тип("СправочникСсылка.НомераГТД"));
		Если ЗначениеЗаполнено(НомерГТД) Тогда
			НакладнаяОбъект.НомерВходящегоДокумента = НомерГТД;
			Если СтрокаТовара.Свойство("ДатаГТД") Тогда
				НакладнаяОбъект.ДатаВходящегоДокумента = XMLЗначение(тип("Дата"),СтрокаТовара.ДатаГТД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатШапка.Свойство("АВБ") Тогда
		НакладнаяОбъект.Комментарий = РезультатШапка.АВБ; 
	КонецЕсли;
	
	Для i=0 По Док.Товары.Количество()-1 Цикл
		Попытка
			НакладнаяОбъект.Товары[i].Серия = Док.Товары[i].Серия;
			НакладнаяОбъект.Товары[i].НомерГТД = Док.Товары[i].НомерГТД;
		Исключение
			Ошибки.Добавить("Табличная часть. Заполнение серий и ГТД. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		НакладнаяОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибки.Добавить("Запись документа Поступление товаров/услуг " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		
		Попытка
			НакладнаяОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			
		КонецПопытки;
	КонецПопытки;

	Если НовыйДокумент Тогда
		ЗаписатьУИД(РезультатШапка.КодВПрограмме, НакладнаяОбъект.Ссылка);
	КонецЕсли;
	
	// ПКО
	ПКОСсылка = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ПриходныйОрдерНаТовары"));
	НовыйДокумент = Ложь;
	
	Если ЗначениеЗаполнено(ПКОСсылка) Тогда
		ПКООбъект = ПКОСсылка.ПолучитьОбъект();
		ПКООбъект.Товары.Очистить();
	Иначе
		ПКООбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		НовыйДокумент = Истина;
	КонецЕсли;
		
	ПКООбъект.Заполнить(НакладнаяОбъект.Ссылка);
	ЗаполнитьЗначениясвойств(ПКООбъект,НакладнаяОбъект);
	ПКООбъект.ЗакрыватьГрафикПоступления = Истина;
	ПКООбъект.Отправитель = НакладнаяОбъект.Партнер;
	ПКООбъект.Распоряжение = НакладнаяОбъект.Ссылка;
	ПКООбъект.СкладскаяОперация = перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
	ПКООбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	Для Каждого ЗаписьТовара Из Док.Товары Цикл
		НоваяСтрока = ПКООбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ЗаписьТовара);
		НоваяСтрока.СтатусУказанияСерий = 4;
	КонецЦикла;
	
	Попытка
		ПКООбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибки.Добавить("Запись документа Приходного ордера на товары " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		Попытка
			ПКООбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			
		КонецПопытки;
	КонецПопытки;
	
	Если НовыйДокумент Тогда
		ЗаписатьУИД(РезультатШапка.КодВПрограмме, ПКООбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

Процедура XML_Документ_ЗаявкаНаРасходованиеДС(Элементы, Организация, Контрагент, Договор, Валюта, Ошибки, УИДФайла)
	
	РезультатШапка = Новый Структура;
	МассивТовары = Новый Массив;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли ВРег(j.ИмяУзла) = ВРег("Контрагент") И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Договор" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Статус" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Сумма" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Число"),j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "НомерPO" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 9 Тогда
		Ошибки.Добавить("Документ.ЗаявкаНаРасходованиеДС, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	Док = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));

	ЕстьДокумент = Истина;
	
	Если Док = Неопределено Тогда
		ЕстьДокумент = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
			|ГДЕ
			|	ЗаявкаНаРасходованиеДенежныхСредств.Организация = &Организация
			|	И ЗаявкаНаРасходованиеДенежныхСредств.Номер = &Номер
			|	И ЗаявкаНаРасходованиеДенежныхСредств.Дата = &Дата
			|	И ЗаявкаНаРасходованиеДенежныхСредств.Контрагент = &Контрагент";
			
			Запрос.УстановитьПараметр("Дата", РезультатШапка.Дата);
			Запрос.УстановитьПараметр("Номер", РезультатШапка.Номер);
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		Если Док = Неопределено Тогда
			Док = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		Иначе
			Док.РасшифровкаПлатежа.Очистить();
		КонецЕсли;
		
		Док.Дата = РезультатШапка.Дата;
		Док.Номер = РезультатШапка.Номер;
		Док.Партнер = Контрагент;
		Док.Контрагент = НайтиКонтрагента(Контрагент);
		Док.Организация = Организация;
		Попытка
			Док.Валюта = Договор.ВалютаВзаиморасчетов;
		Исключение
			Ошибки.Добавить("Ошибка Договор.ВалютаВзаиморасчетов ЗаявкаНаРасходованиеДенежныхСредств. " + Договор + ". " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
		Док.ПеречислениеВБюджет = Ложь;
		Док.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа;
		Док.ПлатежиПо275ФЗ = Ложь;
		Док.ПриоритетОплаты = Справочники.ПриоритетыОплаты.НайтиПоНаименованию("Средний");
		Док.СверхЛимита = Ложь;
		Док.СписокФизЛиц = Ложь;
		Док.Комментарий = РезультатШапка.НомерPO;
		
		Попытка
			Док.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств[РезультатШапка.Статус];
		Исключение
			Ошибки.Добавить("Ошибка статуса документа ЗаявкаНаРасходованиеДенежныхСредств. " + РезультатШапка.Статус + ". " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
		
		Док.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;		
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		Док.СуммаДокумента = РезультатШапка.Сумма;
		Док.ФормаОплатыБезналичная = Истина;
		Док.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная;
		Док.ФормаОплатыНаличная = Ложь;		
		Док.ФормаОплатыПлатежнаяКарта = Ложь;
		Док.Договор = Договор;
		Док.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
		Док.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		Док.КтоЗаявил = Справочники.Пользователи.НайтиПоНаименованию("СтрелецЕВ");
		Док.ДатаПлатежа = РезультатШапка.Дата;
		Док.ЖелательнаяДатаПлатежа = РезультатШапка.Дата;
		Док.БанковскийСчетКонтрагента = НайтиСчетКонтрагента(Док.Контрагент,Валюта);
		Док.ФормаОплатыБезналичная = Истина;
		Док.ФормаОплатыНаличная  = Истина;
		дОК.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Основное подразделение");
		
		НоваяСтрока = Док.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = Валюта;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Партнер = Контрагент;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		
		Если РезультатШапка.Свойство("СтавкаНДС") Тогда
			Попытка
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[РезультатШапка.СтавкаНДС];
			Исключение
				Ошибки.Добавить("Ставка НДС - " + РезультатШапка.СтавкаНДС + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			КонецПопытки;
		КонецЕсли;
		
		Если РезультатШапка.Свойство("СуммаНДС") Тогда
			НоваяСтрока.СуммаНДС = РезультатШапка.СуммаНДС;	
		КонецЕсли;
		
		НоваяСтрока.Сумма = РезультатШапка.Сумма;
		НоваяСтрока.СуммаВзаиморасчетов = РезультатШапка.Сумма;

		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
			Если НЕ ЕстьДокумент Тогда
				Набор = РегистрыСведений.Расш1_СоответствияКлик1С.СоздатьМенеджерЗаписи();
				Набор.УИД = РезультатШапка.КодВПрограмме;
				Набор.Ресурс = Док.Ссылка;
				Набор.Записать();
			КонецЕсли;
		Исключение
			Ошибки.Добавить("Запись документа ЗаявкаНаРасходованиеДенежныхСредств " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
				
КонецПроцедуры

Процедура XML_Документ_ПоступлениеТоваровУслуг(Элементы, Организация, Контрагент, Договор, Склад, Валюта, Ошибки, УИДФайла);
	РезультатШапка = Новый Структура;
	МассивТовары = Новый Массив;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли ВРег(j.ИмяУзла) = ВРег("Валюта") И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "ВидОперации" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Договор" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					//Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КонтрАгент" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Товары" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатТовары = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "Сумма" ИЛИ jj.ИмяУзла = "СуммаНДС" ИЛИ jj.ИмяУзла = "Цена" ИЛИ jj.ИмяУзла = "ЦенаЗаУпаковку" 
						ИЛИ jj.ИмяУзла = "Количество" ИЛИ jj.ИмяУзла = "КоличествоУпаковок" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;						
					Иначе
						РезультатТовары.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивТовары.Добавить(РезультатТовары);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 7 Тогда
		Ошибки.Добавить("Документ.ПриходныйОрдерНаТовары, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	Док = Неопределено;
	
	Если РезультатШапка.Свойство("КодВПрограмме") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Расш1_СоответствияКлик1С.Ресурс КАК Ресурс
			|ИЗ
			|	РегистрСведений.Расш1_СоответствияКлик1С КАК Расш1_СоответствияКлик1С
			|ГДЕ
			|	Расш1_СоответствияКлик1С.УИД = &УИД";
		
		Запрос.УстановитьПараметр("УИД", РезультатШапка.КодВПрограмме);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ЕстьДокумент = Ложь;
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Док = ВыборкаДетальныеЗаписи.Ресурс.ПолучитьОбъект();		
			ЕстьДокумент = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Док = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
			|ГДЕ
			|	ПриобретениеТоваровУслуг.Дата = &Дата
			|	И ПриобретениеТоваровУслуг.Номер = &Номер
			|	И ПриобретениеТоваровУслуг.Партнер = &Партнер
			|	И ПриобретениеТоваровУслуг.Организация = &Организация
			|	И ПриобретениеТоваровУслуг.Соглашение = &Соглашение";
			
			Запрос.УстановитьПараметр("Дата", РезультатШапка.Дата);
			Запрос.УстановитьПараметр("Номер", РезультатШапка.Номер);
			Запрос.УстановитьПараметр("Партнер", Контрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("Соглашение", Договор);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		Если Док = Неопределено Тогда
			Док = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		Иначе
			Док.Товары.Очистить();
		КонецЕсли;
		
		Док.Валюта = Валюта;
		Док.ВалютаВзаиморасчетов = Валюта;
		Док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		Док.ВернутьМногооборотнуюТару = Ложь;		
		Док.Дата = РезультатШапка.Дата;
		Док.Договор = Договор;
		Док.ЕстьАлкогольнаяПродукция = Ложь;
		Док.ЕстьКиЗГИСМ = Ложь;
		Док.ЕстьМаркируемаяПродукцияГИСМ = Ложь;
		
		
		Док.Номер = РезультатШапка.Номер;
		Док.Партнер = Контрагент;
		Док.Контрагент = НайтиКонтрагента(Контрагент);		
		Док.Валюта = Валюта;
		Док.Склад = Склад;
		Док.СуммаДокумента = РезультатШапка.Сумма;		
		Док.ЦенаВключаетНДС = Истина;
		
		Док.Согласован = Истина;
		Док.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
		Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;

		
		Док.Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
		Док.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		
		Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Док.Соглашение = Договор;

		
		Попытка
			Док.Статус = Перечисления.СтатусыПриходныхОрдеров[РезультатШапка.Статус];
		Исключение
			Ошибки.Добавить("Статус ПриходныйОрдерНаТовары - " + РезультатШапка.Статус + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
		Док.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		Док.Распоряжение = НайтиОбъектСинхронизации(РезультатШапка.Накладная);
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Док.Склад =РезультатШапка.Склад;
		Попытка
			Док.СкладскаяОперация = Перечисления.СкладскиеОперации[РезультатШапка.СкладскаяОперация];
		Исключение
			Ошибки.Добавить("СкладскиеОперации ПриходныйОрдерНаТовары - " + РезультатШапка.СкладскиеОперации + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
		
		ВидНоменклатурыБезСерии = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары с сериями без срока годности");
		ВидНоменклатурыССерией = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары со сроком годности");
								   
		Для Каждого Элем Из МассивТовары Цикл
			НоваяСтрока = Док.Товары.Добавить();
			НоваяСтрока.Номенклатура = НайтиОбъектСинхронизации(Элем.Номенклатура,Тип("СправочникСсылка.Номенклатура"));
			НоваяСтрока.Упаковка = НайтиОбъектСинхронизации(Элем.ЕдиницаУпаковок,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			НоваяСтрока.КоличествоУпаковок = Элем.КоличествоУпаковок;
			НоваяСтрока.Количество = Элем.Количество;
			НоваяСтрока.Серия = НайтиОбъектСинхронизации(Элем.Серия,Тип("СправочникСсылка.СерииНоменклатуры"));
			Если ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
				НоваяСтрока.СтатусУказанияСерий = 4;				
			КонецЕсли;			
		КонецЦикла;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Ошибки.Добавить("Запись документа ПриходныйОрдерНаТовары " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Если НЕ ЕстьДокумент Тогда
			Набор = РегистрыСведений.Расш1_СоответствияКлик1С.СоздатьМенеджерЗаписи();
			Набор.УИД = РезультатШапка.КодВПрограмме;
			Набор.Ресурс = Док.Ссылка;
			Набор.Записать();
		КонецЕсли;
КонецПроцедуры

Процедура XML_Документ_ПриходныйОрдерНаТовары(Элементы, Организация, Контрагент, Склад, Валюта, Ошибки, УИДФайла)
	РезультатШапка = Новый Структура;
	МассивТовары = Новый Массив;
	
	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли ВРег(j.ИмяУзла) = ВРег("Отправитель") И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Склад" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Статус" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "СкладскаяОперация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Товары" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатТовары = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "Сумма" ИЛИ jj.ИмяУзла = "СуммаНДС" ИЛИ jj.ИмяУзла = "Цена" ИЛИ jj.ИмяУзла = "ЦенаЗаУпаковку" 
						ИЛИ jj.ИмяУзла = "Количество" ИЛИ jj.ИмяУзла = "КоличествоУпаковок" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;						
					Иначе
						РезультатТовары.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивТовары.Добавить(РезультатТовары);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 6 Тогда
		Ошибки.Добавить("Документ.ПриходныйОрдерНаТовары, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	Док = Неопределено;
	
	Если РезультатШапка.Свойство("КодВПрограмме") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Расш1_СоответствияКлик1С.Ресурс КАК Ресурс
			|ИЗ
			|	РегистрСведений.Расш1_СоответствияКлик1С КАК Расш1_СоответствияКлик1С
			|ГДЕ
			|	Расш1_СоответствияКлик1С.УИД = &УИД";
		
		Запрос.УстановитьПараметр("УИД", РезультатШапка.КодВПрограмме);
			
		РезультатЗапроса = Запрос.Выполнить();
			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ЕстьДокумент = Ложь;
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Док = ВыборкаДетальныеЗаписи.Ресурс.ПолучитьОбъект();		
			ЕстьДокумент = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Док = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
			|ГДЕ
			|	ПриходныйОрдерНаТовары.Дата = &Дата
			|	И ПриходныйОрдерНаТовары.Номер = &Номер
			|	И ПриходныйОрдерНаТовары.Отправитель = &Отправитель
			|	И ПриходныйОрдерНаТовары.Склад = &Склад";
			
			Запрос.УстановитьПараметр("Дата", РезультатШапка.Дата);
			Запрос.УстановитьПараметр("Номер", РезультатШапка.Номер);
			Запрос.УстановитьПараметр("Отправитель", Контрагент);
			Запрос.УстановитьПараметр("Склад", Склад);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Док = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		Если Док = Неопределено Тогда
			Док = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		Иначе
			Док.Товары.Очистить();
		КонецЕсли;
		
		Док.Дата = РезультатШапка.Дата;
		Док.Номер = РезультатШапка.Номер;
		Док.Отправитель = Контрагент;
		Попытка
			Док.Статус = Перечисления.СтатусыПриходныхОрдеров[РезультатШапка.Статус];
		Исключение
			Ошибки.Добавить("Статус ПриходныйОрдерНаТовары - " + РезультатШапка.Статус + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
		Док.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		Док.Распоряжение = НайтиОбъектСинхронизации(РезультатШапка.Накладная);
		Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Док.Склад =РезультатШапка.Склад;
		Попытка
			Док.СкладскаяОперация = Перечисления.СкладскиеОперации[РезультатШапка.СкладскаяОперация];
		Исключение
			Ошибки.Добавить("СкладскиеОперации ПриходныйОрдерНаТовары - " + РезультатШапка.СкладскиеОперации + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		КонецПопытки;
		
		ВидНоменклатурыБезСерии = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары с сериями без срока годности");
		ВидНоменклатурыССерией = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары со сроком годности");
								   
		Для Каждого Элем Из МассивТовары Цикл
			НоваяСтрока = Док.Товары.Добавить();
			НоваяСтрока.Номенклатура = НайтиОбъектСинхронизации(Элем.Номенклатура,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			НоваяСтрока.Упаковка = НайтиОбъектСинхронизации(Элем.ЕдиницаУпаковок,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			НоваяСтрока.КоличествоУпаковок = Элем.КоличествоУпаковок;
			НоваяСтрока.Количество = Элем.Количество;
			НоваяСтрока.Серия = НайтиОбъектСинхронизации(Элем.Серия,Тип("СправочникСсылка.СерииНоменклатуры"));
			Если ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
				НоваяСтрока.СтатусУказанияСерий = 4;				
			КонецЕсли;			
		КонецЦикла;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Ошибки.Добавить("Запись документа ПриходныйОрдерНаТовары " + ОписаниеОшибки() + " (" + УИДФайла + ")");
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Если НЕ ЕстьДокумент Тогда
			Набор = РегистрыСведений.Расш1_СоответствияКлик1С.СоздатьМенеджерЗаписи();
			Набор.УИД = РезультатШапка.КодВПрограмме;
			Набор.Ресурс = Док.Ссылка;
			Набор.Записать();
		КонецЕсли;

КонецПроцедуры

Процедура XML_Документ_ТаможеннаяДекларация(Элементы, Организация, Контрагент, ДоговорСоглашения, Валюта, Ошибки, УИДФайла)
	
	РезультатШапка = Новый Структура;
	МассивТовары = Новый Массив;
	МассивРазделов = Новый Массив;
	Запрос = Новый Запрос;

	Ном = 0;
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Валюта" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "ДокументПоступлениеТоваровУслуг" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли ВРег(j.ИмяУзла) = ВРег("Контрагент") И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Договор" Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Товары" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатТовары = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "Количество" ИЛИ jj.ИмяУзла = "ТаможеннаяСтоимость" ИЛИ jj.ИмяУзла = "СуммаПошлины" 
						ИЛИ jj.ИмяУзла = "СуммаНДС" ИЛИ jj.ИмяУзла = "НомерРаздела" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм/количеств в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;	
					Иначе
						РезультатТовары.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивТовары.Добавить(РезультатТовары);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Разделы" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатРазделы = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "ТаможеннаяСтоимость" ИЛИ jj.ИмяУзла = "СтавкаПошлины" ИЛИ jj.ИмяУзла = "СуммаПошлины" 
						ИЛИ jj.ИмяУзла = "СуммаНДС" ИЛИ jj.ИмяУзла = "НомерРаздела" Тогда
						Попытка
							РезультатРазделы.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм/количеств в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;	
					Иначе
						РезультатРазделы.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивРазделов.Добавить(РезультатРазделы);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 8 Тогда
		Ошибки.Добавить("Документ.ТаможеннаяДекларация, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	ДокСсылка = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"));

	ЕстьДокумент = Ложь;
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		ДокОбъект.Разделы.Очистить();
		ДокОбъект.Товары.Очистить();
		ЕстьДокумент = Истина;
	Иначе
		ДокОбъект = Документы.ТаможеннаяДекларацияИмпорт.СоздатьДокумент();
	КонецЕсли;

	НакладнаяСсылка = НайтиОбъектСинхронизации(РезультатШапка.ДокументПоступлениеТоваровУслуг,Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	
	Если НЕ ЗначениеЗаполнено(НакладнаяСсылка) Тогда
		Ошибки.Добавить("Для таможенной декларации не найден документ поступления. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	ДокОбъект.Заполнить(НакладнаяСсылка);
	ДокОбъект.Разделы.Очистить();
	ДокОбъект.Товары.Очистить();
	
	ДокОбъект.Дата = НакладнаяСсылка.Дата;
	ДокОбъект.Валюта = Справочники.Валюты.НайтиПоКоду("643");
	ДокОбъект.Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни;
	ДокОбъект.Организация = Организация;
	ДокОбъект.Поставщик = Контрагент;
	ДокОбъект.КонтрагентПоставщика = НайтиКонтрагента(Контрагент);
	ДокОбъект.НомерДекларации = РезультатШапка.НомерДекларации;
	ДокОбъект.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно;
	ДокОбъект.Партнер = Справочники.Партнеры.НайтиПоНаименованию("УФК Минфина  (Единый лицевой счет)");
	ДокОбъект.Контрагент = НайтиКонтрагента(ДокОбъект.Партнер);
	ДокОбъект.Договор = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Таможня (действ)");
	ДокОбъект.ТаможенныйСбор = РезультатШапка.ТаможенныйСбор;
	ДокОбъект.СтатьяРасходовСбор = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Таможня");
	ДокОбъект.ДатаПлатежа = ДокОбъект.Дата;
	ДокОбъект.ФормаОплаты = перечисления.ФормыОплаты.Безналичная;
	ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.Валюта;
	ДокОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ДокОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	ДокОбъект.БанковскийСчетКонтрагента = НайтиБанковскийСчет(ДокОбъект.Контрагент);
	
	Для Каждого Элем Из МассивРазделов Цикл
		НоваяСтрока = ДокОбъект.Разделы.Добавить();
		НоваяСтрока.НомерРаздела = Элем.НомерРаздела;
		НоваяСтрока.ТаможеннаяСтоимость = Элем.ТаможеннаяСтоимость;		
		НоваяСтрока.СуммаПошлины = Элем.СуммаПошлины;
		
		Если Не ЗначениеЗаполнено(Элем.СтавкаПошлины)
			И ЗначениеЗаполнено(Элем.СуммаПошлины)
			И ЗначениеЗаполнено(Элем.ТаможеннаяСтоимость) Тогда
			НоваяСтрока.СтавкаПошлины = НоваяСтрока.СуммаПошлины * 100 / НоваяСтрока.ТаможеннаяСтоимость;
		Иначе
			НоваяСтрока.СтавкаПошлины = Элем.СтавкаПошлины;
		КонецЕсли;

		НоваяСтрока.НомерДляСФ = РезультатШапка.НомерДекларации;

		Попытка
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[Элем.СтавкаНДС];
		Исключение
			Ошибки.Добавить("Таможенная декларация. НДС раздела. " + ОписаниеОшибки() + " (" + УИДФайла + ")");	
		КонецПопытки;
		НоваяСтрока.СуммаНДС = Элем.СуммаНДС;
	КонецЦикла;
	
	ГТД = НайтиОбъектСинхронизации(РезультатШапка.НомерГТД,Тип("СправочникСсылка.НомераГТД"));
	Для Каждого Элем Из МассивТовары Цикл
		НоваяСтрока = ДокОбъект.Товары.Добавить();
		НоваяСтрока.НомерРаздела = Элем.НомерРаздела;
		НоваяСтрока.Номенклатура = НайтиОбъектСинхронизации(Элем.Номенклатура,Тип("СправочникСсылка.Номенклатура"));
		НоваяСтрока.КоличествоУпаковок = Элем.Количество;
		НоваяСтрока.Количество = Элем.Количество;
		НоваяСтрока.ТаможеннаяСтоимость = Элем.ТаможеннаяСтоимость;
		НоваяСтрока.СуммаПошлины = Элем.СуммаПошлины;
		НоваяСтрока.СуммаНДС = Элем.СуммаНДС;
		
		Если ЗначениеЗаполнено(ГТД) Тогда
			НоваяСтрока.СтранаПроисхождения = ГТД.СтранаПроисхождения;
			НоваяСтрока.НомерГТД = ГТД;
		КонецЕсли;
		НоваяСтрока.Склад = НакладнаяСсылка.Склад;
		НоваяСтрока.ДокументПоступления = НакладнаяСсылка;
	КонецЦикла;

	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибки.Добавить("Запись документа таможенная декларация " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Если Не ЕстьДокумент Тогда
		ЗаписатьУИД(РезультатШапка.КодВПрограмме, ДокОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

Процедура XML_Документ_ПеремещениеТоваров(Элементы, Ошибки, УИДФайла)
	Ном = 0;
	МассивТовары = Новый массив;
	РезультатШапка = Новый Структура;
	
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "ДокументПоступления" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Товары" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатТовары = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "Количество" ИЛИ jj.ИмяУзла = "Сумма" ИЛИ jj.ИмяУзла = "Цена" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм/количеств в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;	
					Иначе
						РезультатТовары.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивТовары.Добавить(РезультатТовары);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 5 Тогда
		Ошибки.Добавить("Документ.ЗаказПоставщику, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	ДокСсылка = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ПеремещениеТоваров"));
		
	ЕстьДокумент = Ложь;
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		ДокОбъект = ДокСсылка.ПолучитьОбъект();		
		ЕстьДокумент = Истина;
	Иначе
		ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
	КонецЕсли;
	
	НакладнаяСсылка = НайтиОбъектСинхронизации(РезультатШапка.ДокументПоступления,Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	
	Если НЕ ЗначениеЗаполнено(НакладнаяСсылка) Тогда
		Ошибки.Добавить("Не найдена накладная для документа перемещения. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	ДокОбъект.Заполнить(НакладнаяСсылка);
	ДокОбъект.Товары.Очистить();
	ДокОбъект.Серии.Очистить();
	
	ДокОбъект.СкладПолучатель = НайтиОбъектСинхронизации(РезультатШапка.СкладПолучатель,Тип("СправочникСсылка.Склады"));
	ДокОбъект.Дата = РезультатШапка.Дата;
	ДокОбъект.ДатаРаспоряжения = РезультатШапка.Дата;
	ДокОбъект.ДокументОснование = НакладнаяСсылка;
	ДокОбъект.Номер = РезультатШапка.Номер;
	ДокОбъект.СкладОтправитель = НайтиОбъектСинхронизации(РезультатШапка.СкладОтправитель,Тип("СправочникСсылка.Склады"));
	ДокОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ДокОбъект.Расш1_Синхронизации = Истина;
	
	Для Каждого Элем Из НакладнаяСсылка.Товары Цикл
		НоваяСтрока = ДокОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Элем);
		
		Если ЗначениеЗаполнено(Элем.Серия) Тогда
			НоваяСтрока.СтатусУказанияСерий = 4;
			НоваяСтрока.СтатусУказанияСерийОтправитель = 4;
			НоваяСтрока.СтатусУказанияСерийПолучатель = 4;
			НоваяСтрока = ДокОбъект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элем); 			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибки.Добавить("Запись документа перемещение товара. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Если Не ЕстьДокумент Тогда
		ЗаписатьУИД(РезультатШапка.КодВПрограмме, ДокОбъект.Ссылка);
	КонецЕсли;

	
КонецПроцедуры

Процедура XML_Документ_СчетПокупателю(Элементы, Организация, Контрагент, Договор, Валюта, Ошибки, УИДФайла) 
	Ном = 0;
	МассивТовары = Новый массив;
	РезультатШапка = Новый Структура;
	
	Для Каждого Элемент Из Элементы.ДочерниеУзлы Цикл
		Если элемент.ИмяУзла = "КлючевыеСвойства" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				Если j.ИмяУзла = "Дата" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					Попытка
						РезультатШапка.Вставить(j.ИмяУзла,XMLЗначение(тип("Дата"),j.ТекстовоеСодержимое));
					Исключение
						Ошибки.Добавить("Преобразование даты документа. " + ОписаниеОшибки() + " (" + УИДФайла + ")");
					КонецПопытки;
				ИначеЕсли j.ИмяУзла = "Номер" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КодВПрограмме" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Организация" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "КонтрАгент" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Договор" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "Налогообложение" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				ИначеЕсли j.ИмяУзла = "ВариантОплаты" И ЗначениеЗаполнено(j.ТекстовоеСодержимое) Тогда
					Ном = Ном + 1;
					РезультатШапка.Вставить(j.ИмяУзла,XMLСтрока(j.ТекстовоеСодержимое));
				КонецЕсли;		
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		Если элемент.ИмяУзла = "Товары" Тогда
			Для Каждого j Из элемент.ДочерниеУзлы Цикл
				РезультатТовары = Новый Структура;
				Для Каждого jj Из j.ДочерниеУзлы Цикл
					Если jj.ИмяУзла = "Количество" ИЛИ jj.ИмяУзла = "Сумма" ИЛИ jj.ИмяУзла = "Цена"
						ИЛИ jj.ИмяУзла = "СуммаНДС" ИЛИ jj.ИмяУзла = "СуммаСНДС" Тогда
						Попытка
							РезультатТовары.Вставить(jj.ИмяУзла,XMLЗначение(тип("Число"),jj.ТекстовоеСодержимое));
						Исключение
							Ошибки.Добавить("Преобразование сумм/количеств в документе. " + j.ИмяУзла + " " + ОписаниеОшибки() + " (" + УИДФайла + ")");
						КонецПопытки;	
					Иначе
						РезультатТовары.Вставить(jj.ИмяУзла,XMLСтрока(jj.ТекстовоеСодержимое));
					КонецЕсли;
				КонецЦикла;
				МассивТовары.Добавить(РезультатТовары);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		РезультатШапка.Вставить(элемент.ИмяУзла,XMLСтрока(элемент.ТекстовоеСодержимое));		
	КонецЦикла;
	
	Если Ном <> 8 Тогда
		Ошибки.Добавить("Документ.ЗаказПоставщику, не все ключевые поля присутствуют. (" + УИДФайла + ")");
		Возврат;
	КонецЕсли;
	
	ДокСсылка = НайтиОбъектСинхронизации(РезультатШапка.КодВПрограмме,Тип("ДокументСсылка.ЗаказКлиента"));
	ЕстьДокумент = Ложь;	
	Если ДокСсылка = Неопределено Тогда
		Док = Документы.ЗаказКлиента.СоздатьДокумент();
	Иначе
		Док = ДокСсылка.ПолучитьОбъект();
		Док.Товары.Очистить();
		Док.ЭтапыГрафикаОплаты.Очистить();
		ЕстьДокумент = Истина;
	КонецЕсли;
		
	Док.Дата = РезультатШапка.Дата;
	Док.ДатаОтгрузки = РезультатШапка.Дата;
	Док.ДатаСогласования = РезультатШапка.Дата;
	Док.Номер = РезультатШапка.Номер;
	Док.Партнер = Контрагент;
	Док.Контрагент = НайтиКонтрагента(Контрагент);
	Док.Организация = Организация;
	Док.Соглашение = Договор;
	Док.Валюта = Валюта;
	Док.ВернутьМногооборотнуюТару = Ложь;
	Док.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	
	ОтветственныеЛица = ПолучитьОтветственныхЛиц(Док.Дата,Док.Организация);
	
	Док.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтер;
	Док.Руководитель = ОтветственныеЛица.Руководитель;
	Док.Грузополучатель = Док.Контрагент;
	Док.НеОтгружатьЧастями = Ложь;
	Док.ОсобыеУсловияПеревозки = Ложь;
	Док.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Основное подразделение");
	Док.ПорядокОплаты = Док.Договор.ПорядокОплаты;
	Док.ПорядокРасчетов = перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	//Док.Приоритет = Перечисления.Приоритеты.Средний;
	Док.СкидкиРассчитаны = Истина;
	Док.Склад = Справочники.Склады.НайтиПоНаименованию("Склад РСГ");
	Док.Согласован = Истина;
	Док.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	Док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	
	Попытка
		Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС[РезультатШапка.Налогообложение];
	Исключение
		Ошибки.Добавить("Документ.ЗаказКлиента, налогооблажение " + РезультатШапка.Налогообложение + " (" + УИДФайла + "). " + ОписаниеОшибки());
	КонецПопытки;
	
	Если РезультатШапка.Свойство("СуммаВключаетНДС") Тогда
		Док.ЦенаВключаетНДС = XMLЗначение(тип("Булево"),РезультатШапка.СуммаВключаетНДС);
	КонецЕсли;
	Док.ТребуетсяЗалогЗаТару = Ложь;
	Док.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Док.ЦенаВключаетНДС = Истина;
		
	ИтогСумма = 0;
	Для Каждого Элем Из МассивТовары Цикл
		Попытка
			ИтогСумма = ИтогСумма +  Элем.СуммаСНДС;
		Исключение
			Ошибки.Добавить("Документ.ЗаказКлиента, СуммаСНДС " + "(" + УИДФайла + "). " + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		НоваяСтрока = Док.Товары.Добавить();
		НоваяСтрока.Номенклатура = НайтиОбъектСинхронизации(Элем.Номенклатура,Тип("СправочникСсылка.Номенклатура"));
		НоваяСтрока.ДатаОтгрузки = Док.ДатаОтгрузки;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НоваяСтрока.КоличествоУпаковок = Элем.Количество;
		НоваяСтрока.Количество = Элем.Количество;
		НоваяСтрока.Отменено = Ложь;
		НоваяСтрока.Склад = Док.Склад;
		
		Попытка
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС[Элем.СтавкаНДС];
		Исключение
			Ошибки.Добавить("Документ.ЗаказКлиента, ставка НДС " + Элем.СтавкаНДС + " (" + УИДФайла + "). " + ОписаниеОшибки());
		КонецПопытки;
		
		НоваяСтрока.Цена = Элем.Сумма;
		НоваяСтрока.Сумма = Элем.Сумма;
		НоваяСтрока.СуммаНДС = Элем.СуммаНДС;
		НоваяСтрока.СуммаСНДС = Элем.СуммаСНДС;

		Если Элем.Свойство("ЕдиницаУпаковок") И ЗначениеЗаполнено(Элем.ЕдиницаУпаковок) Тогда			
			НоваяСтрока.Упаковка = НайтиОбъектСинхронизации(Элем.ЕдиницаУпаковок,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ИначеЕсли Элем.Свойство("ЕдиницаИзмерения") И ЗначениеЗаполнено(Элем.ЕдиницаИзмерения) Тогда
			НоваяСтрока.Упаковка = НайтиОбъектСинхронизации(Элем.ЕдиницаИзмерения,Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Иначе
			НоваяСтрока.Упаковка = НайтиЗаглушку(Ошибки, УИДФайла);
		КонецЕсли;		
				
	КонецЦикла;
	
	Док.СуммаДокумента = ИтогСумма;
		
	НоваяСтрокаЭтапов = Док.ЭтапыГрафикаОплаты.Добавить();
	
	Попытка
		НоваяСтрокаЭтапов.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом[РезультатШапка.ВариантОплаты];
	Исключение
		Ошибки.Добавить("Документ.ЗаказКлиента, ВариантОплаты " + РезультатШапка.ВариантОплаты + " (" + УИДФайла + "). " + ОписаниеОшибки());
	КонецПопытки;
	
	НоваяСтрокаЭтапов.ДатаПлатежа = Док.Дата;
	НоваяСтрокаЭтапов.ПроцентЗалогаЗаТару = 100;
	НоваяСтрокаЭтапов.ПроцентПлатежа = 100;
	НоваяСтрокаЭтапов.СуммаПлатежа = Док.СуммаДокумента;
	НоваяСтрокаЭтапов.Сдвиг = РезультатШапка.СдвигДатыОплаты;
		
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Ошибки.Добавить("Запись документа ЗаказКлиента " + ОписаниеОшибки() + " (" + УИДФайла + ")");
		Док.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
		
	Если НЕ ЕстьДокумент Тогда
		ЗаписатьУИД(РезультатШапка.КодВПрограмме, Док.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпискаОбъектов

Функция НайтиБанковскийСчет(Контрагент)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НайтиСтрануРегистрации(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.Код = &Код
		|	И НЕ СтраныМира.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	                              
	Результат = Справочники.СтраныМира.ПустаяСсылка();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция НайтиКонтрагента(Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НайтиОбъектСинхронизации(УИД, ТипДокумента = Неопределено)
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расш1_СоответствияКлик1С.Ресурс КАК Ресурс
		|ИЗ
		|	РегистрСведений.Расш1_СоответствияКлик1С КАК Расш1_СоответствияКлик1С
		|ГДЕ
		|	Расш1_СоответствияКлик1С.УИД = &УИД
		| 	И ТипЗначения(Расш1_СоответствияКлик1С.Ресурс) = &ТипДокумента";
	
	Запрос.УстановитьПараметр("УИД", УИД);
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТипЗначения(Расш1_СоответствияКлик1С.Ресурс) = &ТипДокумента","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ресурс;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОтветственныхЛиц(ДатаДокумента, Организация)
	
	ОтветственныеЛица = Новый Структура;	
	ОтветственныеЛица.Вставить("ГлавныйБухгалтер","");
	ОтветственныеЛица.Вставить("Руководитель","");

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.Владелец = &Владелец
		|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицоГлавныйБухгалтер
		|	И &ДатаЗапроса МЕЖДУ ЕСТЬNULL(ОтветственныеЛицаОрганизаций.ДатаНачала, ДАТАВРЕМЯ(1980, 1, 1, 1, 0, 0)) И ЕСТЬNULL(ОтветственныеЛицаОрганизаций.ДатаОкончания, ДАТАВРЕМЯ(2300, 1, 1, 1, 0, 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.Владелец = &Владелец
		|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицоРуководитель
		|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицоГлавныйБухгалтер
		|	И &ДатаЗапроса МЕЖДУ ЕСТЬNULL(ОтветственныеЛицаОрганизаций.ДатаНачала, ДАТАВРЕМЯ(1980, 1, 1, 1, 0, 0)) И ЕСТЬNULL(ОтветственныеЛицаОрганизаций.ДатаОкончания, ДАТАВРЕМЯ(2300, 1, 1, 1, 0, 0))";
		
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаДокумента);
	Запрос.УстановитьПараметр("ОтветственноеЛицоГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("ОтветственноеЛицоРуководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОтветственныеЛица.Вставить("ГлавныйБухгалтер",ВыборкаДетальныеЗаписи.Ссылка);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОтветственныеЛица.Вставить("Руководитель",ВыборкаДетальныеЗаписи.Ссылка);
	КонецЕсли;
	
	Возврат ОтветственныеЛица;

КонецФункции

#КонецОбласти

#Область Сервисные

Функция НайтиВалюту(КодВалюты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", КодВалюты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Справочники.Валюты.ПустаяСсылка();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаписатьУИД(УИД, Ссылка)
	Набор = РегистрыСведений.Расш1_СоответствияКлик1С.СоздатьМенеджерЗаписи();
	Набор.УИД = УИД;
	Набор.Ресурс = Ссылка;
	Набор.Записать();
КонецПроцедуры

Функция НайтиДоговор(Соглашение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоглашенияСПоставщиками.Расш1_Договор КАК ДоговорКонтрагента
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаписьВЖурнал(Сообщение, Уровень)
	ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДанныхСКлика", 
        Уровень, , ,
        Сообщение);
КонецПроцедуры
	
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = ПолучитьМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции
	
Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции        

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	Попытка
		АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(Новый УникальныйИдентификатор());
		КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
				АдресВоВременномХранилище,
				"BITERP",
				ТипВнешнейКомпоненты.Native);
	Исключение
		ЗаписьВЖурнал(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);		
	КонецПопытки;		
КонецПроцедуры

Функция ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты)
	//Адрес = "125.62.28.226";
	//Порт = 5672;
	//Логин = "admin";
	//Пароль = "1qaz2wsX";
	//ВиртуальныйХост = "/";
	//ИмяОчереди = "KlikIn1c";
	//
	//Попытка
	//	КлиентКомпоненты.Connect(
	//		Адрес,
	//		Порт,
	//		Логин,
	//		Пароль,
	//		ВиртуальныйХост);
	//	
		Попытка               
	//		КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
	//		
	//		Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			Результат = Новый Структура;
			Результат.Вставить("УИД",Неопределено);
			Результат.Вставить("ВрФайл",Неопределено);

			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				ВрФайл = ПолучитьИмяВременногоФайла("xml");
				ТектовыйФайл = Новый ТекстовыйДокумент;
				ТектовыйФайл.УстановитьТекст(ОтветноеСообщение);
				ТектовыйФайл.Записать(ВрФайл,КодировкаТекста.UTF8,Символы.ВК+Символы.ПС);
				Запись = РегистрыСведений.Расш1_XMLПередача.СоздатьМенеджерЗаписи();
				Запись.ДатаЗагрузки = ТекущаяДата();
				Запись.xml = ОтветноеСообщение;
				Запись.УИД = Новый УникальныйИдентификатор();
				Запись.УИДСтрока = Строка(Запись.УИД);
				Запись.Записать();				
				Результат.Вставить("УИД",Запись.УИД);
				Результат.Вставить("ВрФайл",ВрФайл);
				Возврат Результат;
			КонецЕсли;
			//КлиентКомпоненты.BasicCancel("");
		Исключение
			ЗаписьВЖурнал(ОписаниеОшибки() + " " + КлиентКомпоненты.GetLastError(), УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
	//Исключение
	//	ош1 = КлиентКомпоненты.GetLastError();
	//	ош2 = ОписаниеОшибки(); 
	//	ЗаписьВЖурнал(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
	//КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция НайтиСчетКонтрагента(Контрагент,Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
		|	И НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
		|	И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаДенежныхСредств";
	
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Валюта);
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ОтправитьНаСервере(Данные) Экспорт
	//ЗаписьВЖурнал("Начало обмена (передача в КЛИК)", УровеньЖурналаРегистрации.Информация);
		
	//КлиентКомпоненты = ПолучитьКомпонентуСервер();
	
	Адрес = "125.62.28.226";
	Порт = 5672;
	Логин = "admin";
	Пароль = "1qaz2wsX";
	ВиртуальныйХост = "/";
	ИмяОчереди = "KlikOut1C";
	ТочкаОбмена    = "KlikOutput1C";
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяПространства = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	ДокументDOM = Новый ДокументDOM(ИмяПространства, "Message");
	КорневойDOM = ДокументDOM.ЭлементДокумента;
	КорневойDOM.УстановитьАтрибут("ТипДокумента","Справочник.Контрагент");
	
	ТекстСообщения = "";
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	Контрагенты.КодПоОКПО КАК КодПоОКПО
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Банк КАК Банк,
		|	БанковскиеСчетаКонтрагентов.Наименование КАК Наименование,
		|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств.Код КАК ВалютаДенежныхСредствКод,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
		|	И БанковскиеСчетаКонтрагентов.Владелец.ИНН = &ИНН
		|	И БанковскиеСчетаКонтрагентов.Владелец.КПП = &КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентов.Наименование КАК Наименование,
		|	ДоговорыКонтрагентов.Номер КАК Номер,
		|	ДоговорыКонтрагентов.Дата КАК Дата,
		|	ДоговорыКонтрагентов.ТипДоговора КАК ТипДоговора,
		|	ДоговорыКонтрагентов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Код КАК ВалютаВзаиморасчетовКод
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент.ИНН = &ИНН
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Статус = &Статус
		|	И ДоговорыКонтрагентов.Контрагент.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", Данные.ИНН);
	Запрос.УстановитьПараметр("КПП", Данные.КПП);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);

	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ИНН = Данные.ИНН;
		НовыйКонтрагент.КПП = Данные.КПП;
//		НовыйКонтрагент.КПП = Данные.КПП;
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НовыйКонтрагент.Записать();
		
		НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
		ИННЗаполненКорректно = Истина;
		ТекстСообщения = "";
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(НовыйКонтрагент.ИНН, 
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(НовыйКонтрагент.ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
			ИННЗаполненКорректно = Ложь;
			ЗаписьВЖурнал(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка);
			Возврат;
		КонецЕсли;
		
		Рез = СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               НовыйКонтрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               НовыйКонтрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               НовыйКонтрагент.ОбособленноеПодразделение); 
		
		Если Рез Тогда
			РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(НовыйКонтрагент.ЮрФизЛицо),
		                       НовыйКонтрагент.ИНН,
		                       Неопределено);
		
			Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
				ЗаписьВЖурнал(РеквизитыКонтрагента.ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
				Возврат;				   
			КонецЕсли;	
			
			ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента,НовыйКонтрагент);
		КонецЕсли;
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		НовыйПартнер.ДатаРегистрации = ТекущаяДата();
		НовыйПартнер.Поставщик = Истина;
		НовыйПартнер.Клиент = Истина;
		НовыйПартнер.Наименование = НовыйКонтрагент.Наименование;
		НовыйПартнер.НаименованиеПолное = НовыйКонтрагент.НаименованиеПолное;
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;

		Для Каждого Эл Из НовыйКонтрагент.КонтактнаяИнформация Цикл
			ЗаполнитьЗначенияСвойств(НовыйПартнер.КонтактнаяИнформация.Добавить(),Эл);
		КонецЦикла;
		
		Для Каждого Эл Из НовыйКонтрагент.ДополнительныеРеквизиты Цикл
			ЗаполнитьЗначенияСвойств(НовыйПартнер.ДополнительныеРеквизиты.Добавить(),Эл);
		КонецЦикла;
				
		Попытка
			НовыйПартнер.Записать();
			НовыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
			НовыйКонтрагент.Записать();
		Исключение
			ЗаписьВЖурнал(ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
			Возврат;	
		КонецПопытки;

		РезультатЗапроса = Запрос.ВыполнитьПакет();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	КонецЕсли;
	                           
	КонтактнаяИнформация = Новый Массив;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		НайденныйОбъект = НайтиОбъектСинхронизации(Данные.КодВПрограмме);
		Если НайденныйОбъект = Неопределено Тогда
			Набор = РегистрыСведений.Расш1_СоответствияКлик1С.СоздатьМенеджерЗаписи();
			Набор.УИД = Данные.КодВПрограмме;
			Набор.Ресурс = ВыборкаДетальныеЗаписи.Ссылка;
			Набор.Записать();
		КонецЕсли;	
		
		//ЭлементКонтрагент  = ДокументDOM.СоздатьЭлемент("Справочник.Контрагент");
		
		// Адрес
		Конт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВыборкаДетальныеЗаписи.Ссылка,Перечисления.ТипыКонтактнойИнформации.Адрес,ТекущаяДата(),Ложь);
		
		ЭлементАдрес  = ДокументDOM.СоздатьЭлемент("КонтактнаяИнформация");

		Для Каждого Элем Из Конт Цикл
			Элемент = ДокументDOM.СоздатьЭлемент("Строка");

	        К = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Элем.ЗначенияПолей);
			
			ВидКонтанктнойИнформации = Элем.Вид.наименование;
			
			Если Найти(ВидКонтанктнойИнформации,"Юридический") > 0 Тогда
				ЭлементД = ДокументDOM.СоздатьЭлемент("ТипАдреса");
				ЭлементД.ТекстовоеСодержимое = "Юридический";
				Элемент.ДобавитьДочерний(ЭлементД);
				//Элемент.УстановитьАтрибут("ТипАдреса","Юридический");
			ИначеЕсли Найти(ВидКонтанктнойИнформации,"Фактический") > 0 Тогда
				ЭлементД = ДокументDOM.СоздатьЭлемент("ТипАдреса");
				ЭлементД.ТекстовоеСодержимое = "Фактический";
				Элемент.ДобавитьДочерний(ЭлементД);
				//Элемент.УстановитьАтрибут("ТипАдреса","Фактический");
			Иначе
				ЭлементД = ДокументDOM.СоздатьЭлемент("ТипАдреса");
				ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВидКонтанктнойИнформации);
				Элемент.ДобавитьДочерний(ЭлементД);
				//Элемент.УстановитьАтрибут("ТипАдреса",СтрЗаменить(ВидКонтанктнойИнформации," ","_"));
			КонецЕсли;
			
			ЭлементД = ДокументDOM.СоздатьЭлемент("Адрес");
			ЭлементД.ТекстовоеСодержимое = XMLСтрока(Элем.Представление);
			Элемент.ДобавитьДочерний(ЭлементД);

			//Элемент.УстановитьАтрибут("Адрес",Элем.Представление);
			
			Если К.Свойство("countryCode") Тогда
				ЭлементД = ДокументDOM.СоздатьЭлемент("КодСтраны");
				ЭлементД.ТекстовоеСодержимое = К["countryCode"];
				Элемент.ДобавитьДочерний(ЭлементД);
				//Элемент.УстановитьАтрибут("КодСтраны",К["countryCode"]);
			КонецЕсли;
			
			ЭлементАдрес.ДобавитьДочерний(Элемент);
		КонецЦикла;
		
		КорневойDOM.ДобавитьДочерний(ЭлементАдрес);
		
		// Банки				
		ВыборкаДетальныеЗаписиРС = РезультатЗапроса[1].Выгрузить();
		Б = ВыборкаДетальныеЗаписиРС.ВыгрузитьКолонку("Банк");
			
		ЗапросКБанкам = Новый Запрос;
		ЗапросКБанкам.Текст = 
			"ВЫБРАТЬ
			|	КлассификаторБанков.Наименование КАК Наименование,
			|	КлассификаторБанков.Код КАК Код,
			|	КлассификаторБанков.КоррСчет КАК КоррСчет,
			|	КлассификаторБанков.ИНН КАК ИНН,
			|	КлассификаторБанков.СВИФТБИК КАК СВИФТБИК,
			|	КлассификаторБанков.Ссылка КАК Ссылка,
			|	КлассификаторБанков.Адрес КАК Адрес,
			|	КлассификаторБанков.Страна.Код КАК СтранаКод
			|ИЗ
			|	Справочник.КлассификаторБанков КАК КлассификаторБанков
			|ГДЕ
			|	КлассификаторБанков.Ссылка В(&СписокСсылок)";
		
		ЗапросКБанкам.УстановитьПараметр("СписокСсылок", Б);
		
		РезультатЗапросаКБанкам = ЗапросКБанкам.Выполнить();
		
		ВыборкаДетальныеЗаписиКБанкам = РезультатЗапросаКБанкам.Выбрать();
		
		БанкиОрг  = ДокументDOM.СоздатьЭлемент("Банки");
		Пока ВыборкаДетальныеЗаписиКБанкам.Следующий() Цикл
			 ЭлементБанка = ДокументDOM.СоздатьЭлемент("Строка");
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("Наименование");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.Наименование);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("БИК");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.Код);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("КоррСчет");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.КоррСчет);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("ИНН");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.ИНН);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("SWIFT");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.СВИФТБИК);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("КодВПрограмме");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.Ссылка.УникальныйИдентификатор());
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("АдресБанка");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.Адрес);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("КодСтраны");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиКБанкам.СтранаКод);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 БанкиОрг.ДобавитьДочерний(ЭлементБанка);
		КонецЦикла;
		
		КорневойDOM.ДобавитьДочерний(БанкиОрг);
		
		БанкСчета  = ДокументDOM.СоздатьЭлемент("БанковскиеСчета");

		Для Каждого ТекЭлемент Из ВыборкаДетальныеЗаписиРС Цикл
			 ЭлементБанка = ДокументDOM.СоздатьЭлемент("Строка");
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("Банк");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ТекЭлемент.Банк.УникальныйИдентификатор());
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("Наименование");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ТекЭлемент.Наименование);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("РасчетныйСчет");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ТекЭлемент.НомерСчета);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("ВалютаСчета");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ТекЭлемент.ВалютаДенежныхСредствКод);
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("КодВПрограмме");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ТекЭлемент.Ссылка.УникальныйИдентификатор());
 			 ЭлементБанка.ДобавитьДочерний(ЭлементД);

			 БанкСчета.ДобавитьДочерний(ЭлементБанка);
		КонецЦикла;
		
		КорневойDOM.ДобавитьДочерний(БанкСчета);
		
		// Договора
		
		ВыборкаДетальныеЗаписиДоговора = РезультатЗапроса[2].Выбрать();
		Договора  = ДокументDOM.СоздатьЭлемент("Договора");
		
		Пока ВыборкаДетальныеЗаписиДоговора.Следующий() Цикл
			 ЭлементДоговора = ДокументDOM.СоздатьЭлемент("Строка");
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("КодВПрограмме");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.Ссылка.УникальныйИдентификатор());
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("Наименование");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.Наименование);
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("Номер");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.Номер);
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("ДатаДоговора");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.Дата);
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("КодВалютыДоговора");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.ВалютаВзаиморасчетовКод);
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);

			 ЭлементД = ДокументDOM.СоздатьЭлемент("ВидДоговора");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.ТипДоговора);
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);
			 
			 ЭлементД = ДокументDOM.СоздатьЭлемент("СрокДействия");
			 ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписиДоговора.ДатаОкончанияДействия);
 			 ЭлементДоговора.ДобавитьДочерний(ЭлементД);

			Договора.ДобавитьДочерний(ЭлементДоговора);
		КонецЦикла; 
		
		КорневойDOM.ДобавитьДочерний(Договора);
		
		ЭлементД = ДокументDOM.СоздатьЭлемент("НаименованиеПолное");
		ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписи.НаименованиеПолное);
		КорневойDOM.ДобавитьДочерний(ЭлементД);
		//ЭлементКонтрагент.УстановитьАтрибут("НаименованиеПолное",ВыборкаДетальныеЗаписи.НаименованиеПолное);
		
		ЭлементД = ДокументDOM.СоздатьЭлемент("ИНН");
		ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписи.ИНН);
		КорневойDOM.ДобавитьДочерний(ЭлементД);
		//ЭлементКонтрагент.УстановитьАтрибут("ИНН",ВыборкаДетальныеЗаписи.ИНН);
		
		ЭлементД = ДокументDOM.СоздатьЭлемент("КПП");
		ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписи.КПП);
		КорневойDOM.ДобавитьДочерний(ЭлементД);
		//ЭлементКонтрагент.УстановитьАтрибут("КПП",ВыборкаДетальныеЗаписи.КПП);
		
		ЭлементД = ДокументDOM.СоздатьЭлемент("ОКПО");
		ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписи.КодПоОКПО);
		КорневойDOM.ДобавитьДочерний(ЭлементД);
		//ЭлементКонтрагент.УстановитьАтрибут("ОКПО",ВыборкаДетальныеЗаписи.КодПоОКПО);
		
		ЭлементД = ДокументDOM.СоздатьЭлемент("КодВПрограмме");
		ЭлементД.ТекстовоеСодержимое = XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		КорневойDOM.ДобавитьДочерний(ЭлементД);
		//ЭлементКонтрагент.УстановитьАтрибут("КодВПрограмме",Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
		
		//КорневойDOM.ДобавитьДочерний(ЭлементКонтрагент);
		ЗаписьDOM = Новый ЗаписьDOM;
		ПотокВПамяти = Новый ПотокВПамяти();
		Вр = ПолучитьИмяВременногоФайла("xml"); 
		ЗаписьXML.ОткрытьФайл(Вр);
		
		ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
		ЗаписьXML.Закрыть();
		
		Попытка
			
			ТекстовыйФайл  = Новый ТекстовыйДокумент;
			ТекстовыйФайл.Прочитать(Вр,КодировкаТекста.UTF8,Символы.ВК+Символы.ПС);
			ТекстСообщения = ТекстовыйФайл.ПолучитьТекст();
			ТекстСообщения = СтрЗаменить(ТекстСообщения," xmlns=""http://v8.1c.ru/8.1/data/enterprise/current-config""","");
			
			//КлиентКомпоненты.Connect(
			//	Адрес,
			//	Порт,
			//	Логин,
			//	Пароль,
			//	ВиртуальныйХост);
			//	
			//	//КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
			//	//КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			//	//КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");

			//			
			//КлиентКомпоненты.BasicPublish(
			//	ТочкаОбмена,
			//	"#" + ИмяОчереди + "#",
			//	ТекстСообщения,
			//	1,
			//	Ложь);
		Исключение
			ЗаписьВЖурнал("Ошибка отправки сообщения! " + ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
			Возврат;
		КонецПопытки;		
		ЗаписьВЖурнал("Сообщение успешно отправлено!", УровеньЖурналаРегистрации.Информация);
	Иначе
		ЗаписьВЖурнал("Не найдена карточка контрагента для отправки в Клик.", УровеньЖурналаРегистрации.Информация);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента,Контрагент)

	ЗаполнитьЗначенияСвойств(Контрагент, РеквизитыКонтрагента, "ИНН, Наименование");
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если РеквизитыКонтрагента.КПП <> Контрагент.КПП Тогда
			Контрагент.КПП = РеквизитыКонтрагента.КПП;
			ЗаполнитьИсториюКПП(Контрагент, РеквизитыКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Контрагент.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		ЗаполнитьИсториюНаименований(Контрагент, РеквизитыКонтрагента);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Контрагент,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда
		
		ЗаполнитьЭлементКонтактнойИнформации(Контрагент,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьИсториюАдресов(Контрагент, РеквизитыКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсториюКПП(Контрагент, РеквизитыКомпании) 
	
	Контрагент.ИсторияКПП.Очистить();
	
	ИсторияКПП = ПолучитьИсториюРеквизита(РеквизитыКомпании, "КПП");
	Если ИсторияКПП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияКПП.Количество() > 1 Тогда
		Для Каждого СтрокаКПП Из ИсторияКПП Цикл
			СтрокаИсторииКПП = Контрагент.ИсторияКПП.Добавить();
			СтрокаИсторииКПП.Период = СтрокаКПП.Дата;
			СтрокаИсторииКПП.КПП    = СтрокаКПП.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИсториюРеквизита(РеквизитыКомпании, ИмяРеквизита)
	
	ИсторияРеквизитов = Неопределено;
	Результат         = Неопределено;
	Если Не (РеквизитыКомпании.Свойство("ИсторияРеквизитов", ИсторияРеквизитов)
		И ИсторияРеквизитов.Свойство(ИмяРеквизита, Результат)
		И ТипЗнч(Результат) = Тип("Массив")) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИсториюНаименований(Контрагент, РеквизитыКомпании) 
	
	ЭтоЮрЛицо = СтрДлина(РеквизитыКомпании.ИНН) = 10;
	
	Контрагент.ИсторияНаименований.Очистить();
	
	ИсторияНаименований = ПолучитьИсториюРеквизита(РеквизитыКомпании, ?(ЭтоЮрЛицо, "Наименование", "ФИО"));
	Если ИсторияНаименований = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияНаименований.Количество() > 1 Тогда
		Для Каждого СтрокаНаименование Из ИсторияНаименований Цикл
			СтрокаИсторииНаименований = Контрагент.ИсторияНаименований.Добавить();
			СтрокаИсторииНаименований.Период = СтрокаНаименование.Дата;
			ДанныеЗаполнения = Новый Структура;
			Если ЭтоЮрЛицо Тогда
				НаименованиеПолное      = СтрокаНаименование.НаименованиеПолное;
				НаименованиеСокращенное = СтрокаНаименование.НаименованиеСокращенное;
			Иначе
				ФИО = СтрокаНаименование.Фамилия + " " + СтрокаНаименование.Имя + " " + СтрокаНаименование.Отчество;
				НаименованиеПолное = СтрШаблон(НСтр("ru = 'Индивидуальный предприниматель %1'"), ФИО);
				НаименованиеСокращенное = СтрШаблон(НСтр("ru = 'ИП %1'"), ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
				ДанныеЗаполнения.Вставить("ФамилияИП", СтрокаНаименование.Фамилия);
				ДанныеЗаполнения.Вставить("ИмяИП", СтрокаНаименование.Имя);
				ДанныеЗаполнения.Вставить("ОтчествоИП", СтрокаНаименование.Отчество);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("НаименованиеПолное", НаименованиеСокращенное);
			ЗаполнитьЗначенияСвойств(СтрокаИсторииНаименований, ДанныеЗаполнения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИсториюАдресов(Контрагент, РеквизитыКомпании) Экспорт
	
	ИсторияАдресов = ПолучитьИсториюРеквизита(РеквизитыКомпании, "Адрес");
	
	Если ИсторияАдресов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ИмяВидаКонтактнойИнформацииЮрАдрес = "ЮрАдресОрганизации";
	Иначе
		ИмяВидаКонтактнойИнформацииЮрАдрес = "ЮрАдресКонтрагента";
	КонецЕсли;
	ВидКонтактнойИнформацииЮрАдрес = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."+ИмяВидаКонтактнойИнформацииЮрАдрес);
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииЮрАдрес);
	
	НайденныеСтроки = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	//ИмяРеквизита = "";
	//ИмяЭлементаДляРазмещения = "";
	//ХранитьИсториюИзменений = Истина;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		//Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
		//	ИмяРеквизита = СтрокаКонтактнойИнформации.ИмяРеквизита;
		//	ИмяЭлементаДляРазмещения = СтрокаКонтактнойИнформации.ИмяЭлементаДляРазмещения;
		//	ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.ХранитьИсториюИзменений;
		//КонецЕсли;
		Контрагент.КонтактнаяИнформация.Удалить(СтрокаКонтактнойИнформации);
	КонецЦикла;
	
	//Если НЕ ХранитьИсториюИзменений Тогда
	//	ПартнерыИКонтрагентыВызовСервера.ВключитьХранениеИсторииИзменений(ИмяВидаКонтактнойИнформацииЮрАдрес);
	//КонецЕсли;
	
	ИндексАктуальногоАдреса = ИсторияАдресов.ВГраница();
	
	ПараметрыОбновления = Новый Структура;
	Для Каждого СтрокаКонтактнойИнформации Из ИсторияАдресов Цикл
		ИндексТекущейКонтактнойИнформации = ИсторияАдресов.Найти(СтрокаКонтактнойИнформации);
		
		ДанныеСтроки = Контрагент.КонтактнаяИнформация.Добавить();
		ДанныеСтроки.Вид = ВидКонтактнойИнформацииЮрАдрес;
		ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		ДанныеСтроки.Значение = СтрокаКонтактнойИнформации.КонтактнаяИнформация;
		ДанныеСтроки.Представление = СтрокаКонтактнойИнформации.Представление;
		//ДанныеСтроки.Комментарий = СтрокаКонтактнойИнформации.Комментарий;
		//ДанныеСтроки.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
		
		Если ИндексТекущейКонтактнойИнформации = 0 Тогда
			ДанныеСтроки.ДействуетС = Неопределено;
		Иначе
			ДанныеСтроки.ДействуетС = СтрокаКонтактнойИнформации.Дата;
		КонецЕсли;
		
		//Если ИндексТекущейКонтактнойИнформации = ИндексАктуальногоАдреса Тогда
		//	ДанныеСтроки.ИмяРеквизита = ИмяРеквизита;
		//	ДанныеСтроки.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		//	ДанныеСтроки.ХранитьИсториюИзменений = Истина;
		//Иначе
		//	ДанныеСтроки.ИмяРеквизита = Неопределено;
		//	ДанныеСтроки.ЭтоИсторическаяКонтактнаяИнформация = Истина;
		//	ДанныеСтроки.ХранитьИсториюИзменений = Истина;
		//КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЭлементКонтактнойИнформации(Контрагент, ВидКонтактнойИнформации, СтруктураДанных) 
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиКонтактнойИнформацииПоВиду(Контрагент, ВидКонтактнойИнформации);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	//Форма[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

Функция ДанныеСтрокиКонтактнойИнформацииПоВиду(Контрагент, ВидКонтактнойИнформации) Экспорт
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = Контрагент.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

#КонецОбласти